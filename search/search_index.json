{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Contour Terminal Emulator","text":""},{"location":"#contour-terminal-emulator","title":"Contour Terminal Emulator","text":"<p>Contour is modern, fast, and designed for everyday use. It's not just a terminal emulator, but a powerhouse of features tailored for those who seek efficiency and control. With GPU-accelerated rendering and high-DPI support, experience the smoothest and most responsive terminal emulator like never before.</p> <p>Contour is designed with the advanced power user in mind, offering high-speed, feature-rich functionality across all major platforms. From Linux and macOS to FreeBSD, OpenBSD and Windows, we've got you covered.  Contour offers a suite of unique features designed to enhance your productivity and user experience. Enjoy support for font ligatures, emoji, and Unicode grapheme clusters. Navigate quickly with vertical line markers and vi-like input modes. Control your settings with runtime configuration reload and customizable key bindings.  Bring your terminal to life with color schemes, profiles, and sixel inline images. Enjoy the convenience of clickable hyperlinks, and set your clipboard with OSC 52.  </p> <p>This website is still in DRAFT mode, please be patient while we're building up the content.</p> <p></p> <p>Install Join  </p>"},{"location":"#key-features","title":"Key Features","text":"<p>  Available on all major platforms, Linux, macOS, FreeBSD, OpenBSD, Windows.  Font ligatures support (very useful for programming and scripting)    Complex Unicode support, including colored Emoji (-: \ud83c\udf08  \ud83d\udc9d  \ud83d\ude1b  \ud83d\udc6a  - including ZWJ, VS15, VS16 emoji :-)  Vi-like input modes for improved navigation, selection and copy'n'paste experience  Vertical Line Markers (quickly jump to markers in your history!)    Profiles (grouped customization of: color scheme, login shell, and related behaviours)  Sixel Image support VT320 Host-programmable and Indicator statusline support   Bold and italic fonts  For a full list of features, click here </p>"},{"location":"CONTRIBUTING/","title":"Contribution Guidelines","text":""},{"location":"CONTRIBUTING/#contribution-guidelines","title":"Contribution Guidelines","text":"<p>Many thanks for your interest in contributing to the Contour terminal emulator.</p> <p>Any kind of contribution is welcome, let it be coding (feature, bugfixes), documentation, or just bug management / community management.</p> <p>If you would like to contribute but do not know how, we welcome you to join our Discord. You can also see some live development on Twitch.</p>"},{"location":"CONTRIBUTING/#some-general-tips","title":"Some general tips:","text":"<ul> <li>Please keep in mind, this project is still in its very early stages (started August 2019) and thus   under very active development. It's not perfect nor bug-free yet.</li> <li>Please fork the main repository at github.com/contour-terminal/contour   then git clone your repository into your preferred location.</li> <li>Always work on a branch based off the master branch, if it is a feature or a bugfix.</li> <li>Please have a look at the coding style guidelines.</li> <li>When creating a pull request, please see if you can keep the commits as atomic as possible.   That is, a single reasonably sized feature or functionality should be committed as   one single commit. If you can branch out a some functionality, let it be a more generalized API or   refactor of something that can stand on their own, then those deserve their own commits.</li> <li>Every new feature should ideally be unit-testable, this isn't always possible or easy for pure GUI   tasks, but the rest should ideally get one. The plus-side of this story is, that one can test their   own code right with the new test case.</li> <li>Bug fixes should ideally also result into an added or tweaked or fixed test case, if possible.</li> </ul>"},{"location":"CONTRIBUTING/#contributing-to-the-website","title":"Contributing to the Website","text":"<p>The website is living directly in the project's main repository. We are using MkDocs to create the website and have the project well documented.</p> <p>Please bear with us, we just started developing this website, it is incomplete and far from perfect. This is why documentation and website development needs the most love and probably external contributions.</p>"},{"location":"CONTRIBUTING/#running-the-website-locally","title":"Running the website locally","text":"<p>In order to contribute to the website, it's best tested locally in an iterative approach.</p> <p>Have a recent Python right next to you, such as Python 3.11+ and install the module requirements:</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre> <p>Use your editor of choice to change the content in <code>docs/</code> and Running</p> <pre><code>mkdocs serve\n</code></pre> <p>to spawn the test HTTP server at port 8080.</p>"},{"location":"features/","title":"List of features","text":""},{"location":"features/#main-features","title":"Main Features","text":"<p>  Available on all 4 major platforms, Linux, macOS, FreeBSD, Windows.    GPU-accelerated rendering.    Terminal tabs  Font ligatures support (very useful for programming and scripting)    Unicode: Emoji support (-: \ud83c\udf08  \ud83d\udc9d  \ud83d\ude1b  \ud83d\udc6a  - including ZWJ, VS15, VS16 emoji :-)    Unicode: Grapheme cluster support    Bold and italic fonts    High-DPI support.  Vi-like input modes for improved navigation, selection and copy'n'paste experience  Vertical Line Markers (quickly jump to markers in your history!)    Blurred behind transparent background when using Windows 10 or KDE window manager on Linux.    Blurrable Background image support.    Runtime configuration reload    256-color and Truecolor support    Key binding customization    Color Schemes    Profiles (grouped customization of: color scheme, login shell, and related behaviours)  Synchronized rendering (via <code>SM ? 2026</code> / <code>RM ? 2026</code>)    Text reflow (configurable via <code>SM ? 2028</code> / <code>RM ? 2028</code>)    Clickable hyperlinks via OSC 8   Clipboard setting via OSC 52  Sixel Image support   Terminal page buffer capture VT extension to quickly extract contents.    Builtin Fira Code inspired progress bar support.    Read-only mode, protecting against accidental user-input to the running application, such as Ctrl+C.  VT320 Host-programmable and Indicator statusline support Size indicator on resize </p>"},{"location":"input-modes/","title":"Input modes","text":""},{"location":"input-modes/#input-modes","title":"Input Modes","text":"<p>Normally, a terminal emulator only knows about one input mode, so there is no need of distinction.</p> <p>Inspired by Vi/Vim, the Termite terminal emulator started to introduce so called Vim-modes, where the user can use the keyboard only to screen text selection, amongst other things. So users can press Ctrl+Shift+Space to enter the vim mode. You can then move the cursor using vim motion keys and then start selecting.</p>"},{"location":"input-modes/#contour-introduces-multiple-vim-like-input-modes","title":"Contour introduces multiple Vim-like input modes:","text":"<ul> <li>insert mode: This is the default input mode. Everything is forwarded to the application.</li> <li>normal mode: Use motion keys to move the cursor and operators to act</li> <li>visual mode: Linear selection, use motion keys to alter the selection.</li> <li>visual line mode: Line based selection, use motion keys to alter the selection.</li> <li>visual block mode: Block based selection, use motion keys to alter the selection.</li> </ul>"},{"location":"input-modes/#supported-operators-normal-mode","title":"Supported operators (Normal Mode)","text":"<ul> <li>Normal: <code>[count] p</code> (paste primary clipboard <code>count</code> times)</li> <li>Normal: <code>yy</code> (yank current line to primary clipboard)</li> <li>Normal: <code>y {motion}</code> (yank given <code>motion</code> to primary clipboard)</li> <li>Normal: <code>y {TextObject}</code> (yank given <code>textObject</code> to primary clipboard, such as <code>yiw</code>, <code>yaw</code>, <code>yip</code>, <code>yap</code>, ...)</li> <li>Visual: <code>y</code> (yank current selection into primary clipboard)</li> <li><code>v</code> enables/disables visual mode</li> <li><code>V</code> enables/disables visual line mode</li> <li><code>i</code> activates insert mode</li> <li><code>Ctrl+v</code> enables/disables visual block mode</li> <li>Normal: <code>o {motion}</code> (opens resource by given <code>motion</code>, this can be a URL or local file)</li> <li>Normal: <code>o {TextObject}</code> (opens resource by given <code>textObject</code>, such as <code>oiw</code>, <code>oaw</code>, <code>oiW</code>, ...)</li> <li>Visual: <code>o</code> (open current selection into primary clipboard)</li> </ul>"},{"location":"input-modes/#supported-motions","title":"Supported motions","text":"<p>Moving the cursor outside of the current view using a motion, will cause the terminal to scroll the view to make that target line visible.</p> <ul> <li><code>[count] h</code></li> <li><code>[count] j</code></li> <li><code>[count] k</code></li> <li><code>[count] l</code></li> <li><code>[count] w</code></li> <li><code>[count] b</code></li> <li><code>[count] e</code></li> <li><code>[count] |</code></li> <li><code>0</code></li> <li><code>$</code></li> <li><code>gg</code></li> <li><code>G</code></li> <li><code>{</code> &amp; <code>}</code></li> </ul>"},{"location":"input-modes/#supported-text-objects","title":"Supported text objects","text":"<ul> <li><code>i&lt;</code>, <code>a&lt;</code> - angle brackets enclosed text</li> <li><code>i{</code>, <code>a{</code> - curly brackets enclosed text</li> <li><code>i\"</code>, <code>a\"</code> - double quotes enclosed text</li> <li><code>ip</code>, <code>ap</code> - backtick enclosed string</li> <li><code>i(</code>, <code>a(</code> - round brackets enclosed string</li> <li><code>i'</code>, <code>a'</code> - single quoted string</li> <li><code>i`</code>, <code>a`</code> - backtick enclosed string</li> <li><code>i[</code>, <code>a[</code> - square bracket enclosed string</li> <li><code>iw</code>, <code>aw</code> - regular word</li> <li><code>iW</code>, <code>aW</code> - space delimited word</li> </ul>"},{"location":"input-modes/#opening-local-files-and-urls","title":"Opening local files and URLs","text":"<p>Contour currently only supports OSC-8 hyperlinks as well as explicitly opening selected text.</p> <p>In normal mode, you can open links by moving the cursor onto a resource (URL or local file) and then press <code>oiW</code> (open in (space separated) word) or use any of the other supported text objects to denote what to open.</p> <p>You may as well type <code>oo</code> to open the URL under the current line. This works if no other information is on this current line, while spaces are trimmed left and right of the given URL in this line.</p>"},{"location":"install/","title":"Installation","text":"<p>Installation</p> <p><code>contour</code> is packaged and available for installation on multiple distributions.</p>"},{"location":"install/#windows-10-or-newer","title":"Windows 10 or newer","text":"<p>Please download Contour for Windows (the <code>.msi</code> file) from our release page, and double click on it to install.</p>"},{"location":"install/#macos","title":"macOS","text":"<pre><code>brew install contour\n</code></pre>"},{"location":"install/#fedora-linux","title":"Fedora Linux","text":"<p>Use the official package</p> <pre><code>sudo dnf install contour-terminal\n</code></pre>"},{"location":"install/#arch-linux","title":"Arch Linux","text":"<p>Please use the AUR, at https://aur.archlinux.org/packages/contour-git.</p>"},{"location":"install/#ubuntu-linux","title":"Ubuntu Linux","text":"<p>Please download Contour for Ubuntu Linux (the <code>.deb</code> files) from our official release page, and then use the following command to install:</p> <pre><code>sudo dpkg -i ~/Downloads/contour-0.3.12.262-UBUNTU_VERSION-ARCH.deb\n</code></pre> <p>If you want to provide feedback in case of any crashes, also install the debug symbols (<code>.ddeb</code>-file), e.g.:</p> <pre><code>sudo dpkg -i ~/Downloads/contour-0.3.12.262-UBUNTU_VERSION-ARCH.ddeb\n</code></pre>"},{"location":"install/#flatpak","title":"Flatpak","text":"<p>Contour is available at the Flathub store.</p> <p></p>"},{"location":"install/#installing-from-source","title":"Installing from source","text":"<p>Contour is best installed from supported package managers, but you can build from source by following the instruction below.</p>"},{"location":"install/#unix-like-systems-linux-freebsd-macos","title":"UNIX-like systems (Linux, FreeBSD, macOS)","text":""},{"location":"install/#prerequisites","title":"Prerequisites","text":"<pre><code>./scripts/install-deps.sh\n</code></pre> <p>This script might ask you for the administrator password if a package dependency can be installed via the system package manager.</p>"},{"location":"install/#compile","title":"Compile","text":"<p>You can use cmake presets to compile contour. The full list of available presets can be seen using <code>cmake --list-presets</code>. To compile release build for linux or MacOs use <code>linux-release</code> or <code>macos-release</code> accordingly. FreeBSD users can use <code>linux-release</code> or configure cmake manually.</p> <pre><code>cmake --preset linux-release \ncmake --build --preset linux-release\n\n# Optionally, if you want to install from source\ncmake --build --preset linux-release --target install\n</code></pre> <p>Please mind, if you want to install into a system root, e.g. <code>/usr/local</code>, you may need to prefix the install command with <code>sudo</code>.</p> <p>Also, ensure that the terminfo file is correctly resolved, as the terminfo library is very limited in locating  the correct terminfo files (e.g. it does not search in <code>/usr/local</code>), you can symlink into <code>~/.terminfo</code> however.</p>"},{"location":"install/#windows-10-or-newer_1","title":"Windows 10 or newer","text":""},{"location":"install/#prerequisites_1","title":"Prerequisites","text":"<p>For Windows, you must have Windows 10, 2018 Fall Creators Update, and Visual Studio 2019, installed. It will neither build nor run on any prior Windows OS, due to libterminal making use of ConPTY API.</p> <ol> <li>Set up vcpkg, preferably somewhere high up in the folder hierarchy, and add the folder to your <code>PATH</code>.</li> </ol> <pre><code>cd C:\\\ngit clone git clone https://github.com/Microsoft/vcpkg.git\n.\\vcpkg\\bootstrap-vcpkg.bat\n</code></pre> <ol> <li>Install Visual Studio Build Tools (make sure to select the CLI tools for    C++, which you might need to do in the separate components tab).</li> <li>Install Qt6 (i.e. to C:\\Qt)</li> <li>Open the developer version of Powershell.</li> <li>In the <code>contour</code> source folder execute <code>.\\scripts\\install-deps.ps1</code>. This step may take a very long time.</li> </ol>"},{"location":"install/#compile_1","title":"Compile","text":"<p>In the developer version of Powershell:</p> <pre><code># change paths accordingly if you installed QT and vcpkg to somewhere else\ncmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=C:\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake -DCMAKE_PREFIX_PATH=C:\\Qt\\6.5.0\\msvc2019_64\\lib\\cmake\ncmake --build build/\n\n# Optionally, if you want to install from source\ncmake --build build/ --target install\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#releases","title":"Releases","text":""},{"location":"release-notes/#062-unreleased","title":"0.6.2 (unreleased)","text":"<ul> <li>Drop Qt5 support</li> <li>Fixes insert mode / default status line colorscheme loading (#1737)</li> <li>Fixes <code>CancelSelection</code> default binding with escape (#1710)</li> <li>Fixes <code>CreateTab</code> to sometimes spawn more than one tab (#1695)</li> <li>Fixes crash using Chinese IME (#1707)</li> <li>Fixes NumLock key handling (#1713)</li> <li>Fixes handling of multiple windows and tabs (#1725)</li> <li>Fixes crash on scaling down some symbols during font size change</li> <li>Enables customizing predefined color palette (#1763)</li> <li>Ensure inserting new tabs happens right next to the currently active tab (#1695)</li> <li>Allow glyphs to underflow if they are not bigger than the cell size (#1603)</li> <li>Adds <code>MoveTabToLeft</code> and <code>MoveTabToRight</code> actions to move tabs around (#1695)</li> <li>Adds <code>MoveTabTo</code> action to move tabs to a specific position (#1695)</li> <li>Adds handling of control codes for Ctrl+5|6|7|8 (#1701)</li> <li>Adds CenterCursor (<code>zz</code>) vi motion</li> <li>Adds ability to name tabs (#1690)</li> <li>Adds dynamic loading of conpty.dll to allow mouse mode on Windows 10</li> <li>Fix empty history jump (#1781)</li> <li>Adds git graph drawing glyphs</li> <li>Fixes double line box drawing characters</li> <li>Adds new arc style for box drawing characters</li> <li>Adds multiple rendering options for braille characters</li> </ul>"},{"location":"release-notes/#061-2024-12-31","title":"0.6.1 (2024-12-31)","text":"<ul> <li>Do not abort when failing to create <code>XDG_STATE_HOME/contour/crash</code> directory</li> <li>Fixes DECRQSS for SGR (#1696)</li> <li>Fixes tab switch crash after resize</li> <li>Fixes tab shrinking after tab creation/switches when a non-zero horizontal window margin is configured</li> <li>Fixes startup crash when window is not yet fully initialized</li> <li>Fixes backtab (Shift+Tab) handling (#1685)</li> <li>Fixes various spelling typos across the codebase (#1688)</li> <li>Improve tab close handling to better select previously focused tab</li> <li>Change <code>colors</code> terminfo entry from 256 up to 32767 colors</li> <li>Add action <code>SwitchToPreviousTab</code> to switch to the previously focused tab</li> </ul>"},{"location":"release-notes/#060-2024-12-26","title":"0.6.0 (2024-12-26)","text":"<ul> <li>Fixes search editor preservation bug on exit from search mode</li> <li>Expose current profile's name through env var <code>CONTOUR_PROFILE</code> (#1637)</li> <li>Add terminal tabs (#90)</li> <li>Add <code>SaveScreenshot</code> and <code>CopyScreenshot</code> action (#210)</li> <li>Protect user from accidentally pasting too large input (#1198)</li> <li>Add binding to exit normal mode with <code>Esc</code> (#1604)</li> <li>Add config option to switch into insert mode after yank (#1604)</li> <li>Add vi-like normal mode Jumps. <code>''</code>, <code>C-O</code> and <code>C-I</code> motions (#1101)</li> <li>Improves window size/resize handling on HiDPI monitor settings (#1628)</li> <li>Improves macOS key handling for Option+Left|Right keys to jump between words in the shell</li> <li>Fixes cropping of underscore character for some fonts (#1603)</li> <li>Fixes DECFRA limits (#1664)</li> <li>Fixes underline styles not being reset on switching to a new style (#1365)</li> </ul>"},{"location":"release-notes/#051-2024-09-30","title":"0.5.1 (2024-09-30)","text":"<ul> <li>Fixes vi-mode motions like <code>viW</code>, <code>yiW</code>, <code>oiW</code> as well as <code>B</code> and <code>W</code></li> <li>Fixes rendered backend loading from config</li> <li>Fixes mouse wheel scrolling on High-DPI screens feeling too slow</li> <li>Enable support for Unicode version 16.0.0 (#1606)</li> <li>Port to C++20's <code>std::format()</code> (#1598)</li> <li>Drop support for Ubuntu 23.10 and older. In order to have less burdain of maintencne, we only support the latest LTS of Ubuntu, which currently is 24.04 (#1607)</li> </ul>"},{"location":"release-notes/#050-2024-09-18","title":"0.5.0 (2024-09-18)","text":"<ul> <li>macOS package is now Apple Silicon native</li> <li>Add CoreText font fallback implementation for macOS (#1533)</li> <li>Add Ubuntu-24.04 in github actions (#1460)</li> <li>Add 'early_exit_threshold' config option (#1460)</li> <li>Add AppImage package with Qt6 support (#586)</li> <li>Add ability to customize the indicator statusline through configuration (#687)</li> <li>Add generation of config file from internal state (#1282)</li> <li>Add SGRSAVE and SGRRESTORE VT sequences to save and restore SGR state (They intentionally conflict with XTPUSHSGR and XTPOPSGR)</li> <li>Add extended word selection feature (#1023)</li> <li>Add some more missing vi input motions, such as <code>y$</code>, <code>o$</code>, and many others as initiated by <code>y</code> and <code>o</code> (#1441)</li> <li>Add CPM fallback for the dependencies</li> <li>Add static build</li> <li>Add shell integration for bash shell.</li> <li>Add better bell sound (#1378)</li> <li>Add config entry to configure behaviour on exit from search mode</li> <li>Add config entry to configure font fallback (#225)</li> <li>Add handling of different input commands (#629)</li> <li>Add key bindings disabled indicator for status line (#783)</li> <li>Add support for highlighting matches of the currently selected text area (beyond double click)</li> <li>When switching to normal mode screen will stay in same position (#808)</li> <li>Add customizable per-input-mode default text/background coloring for indicator statusline (#1528)</li> <li>Add option PasteSelection to paste text as a shell input (#1549)</li> <li>Add case-insensitive smart search (#1410)</li> <li>Add OpenBSD support</li> <li>Add new CLI command: <code>contour info config</code> to list missing entries from config file (#1125).</li> <li>Add xdg-terminal-exec support (#1570).</li> <li>Add predefined color palettes (monokai, gruvbox-light/dark, solarized-light/dark, papercolor-light/dark, one-light, one-dark) (#1285).</li> <li>Update of contour.desktop file (#1423)</li> <li>Changed configuration entry values for <code>font_locator</code> down to <code>native</code> and <code>mock</code> only (#1538).</li> <li>Do not export the <code>TERM</code> environment variable on Windows OS (when using ConPTY).</li> <li>Fixes line corruption after resize (#883)</li> <li>Fixes resize of trivial line (#916)</li> <li>Fixes copying of wrapped line</li> <li>Fixes deletion of spaces on resize </li> <li>Fixes forwarding of input while in normal mode (#1468)</li> <li>Fixes OSC-8 link id collision (#1499)</li> <li>Fixed overlap of glyphs for long codepoints (#1349)</li> <li>Fixed too verbose info during ssh session login (#1447)</li> <li>Fixes corruption of sixel image on high resolution (#1049)</li> <li>Fixes bad wording of OS/X to macOS (#1462)</li> <li>Fixes key bindings and search prompt collision (#1472)</li> <li>Fixes <code>CSI 8 ; (COLS) ; (ROWS) t</code> to resize the terminal with respect to High-DPI</li> <li>Fixes screen sampling with multiple monitors (#940)</li> <li>Fixes bell sound in spawned window in same process (#1515)</li> <li>Fixes status line crush (#1511)</li> <li>Fixes application window icon on (KDE) Wayland</li> <li>Fixes missing keymapping for numpad (#1325)</li> <li>Improves handling of constant bell sound spawning</li> <li>Fixes yW (yank WORD) not working properly in normal mode (#1448)</li> <li>Fixes key mapping Shift+Tab (#1578)</li> </ul>"},{"location":"release-notes/#043-2024-02-04","title":"0.4.3 (2024-02-04)","text":"<ul> <li>Fixes dead lock bug on mouse selection.</li> </ul>"},{"location":"release-notes/#042-2024-02-03","title":"0.4.2 (2024-02-03)","text":"<ul> <li>Fixes Windows alt/control key modifiers (#1408).</li> <li>Fixes Windows built accidentally not including builtin-SSH support (#1427).</li> <li>Fixes some text run segmentation problems, e.g., not making use of some programming ligatures (#395).</li> <li>Fixes mouse scroll wheel events going into the wrong direction if <code>Alt</code> modifier was pressed at the same time (#394).</li> <li>Fixes <code>scripts/install-deps.sh</code> for openSuSE (Tumbleweed) to install the correct dependencies.</li> <li>Fixes missing dependencies for release .deb packages (#1397).</li> <li>Fixes legacy keyboard input protocol not reporting non-Alt modifier (#1411).</li> <li>Fixes thread safety issue on mouse move event handling (#1444).</li> <li>Digitally sign MacOS release binaries using a valid Apple ID.</li> <li>Add support for authenticating to SSH servers with a private key without a password and without requesting for one - also allow password retry (#1425).</li> <li>Default history limit is now 1000 lines rather than 0 lines.</li> </ul>"},{"location":"release-notes/#041-2023-12-31","title":"0.4.1 (2023-12-31)","text":"<ul> <li>Fixes fast scrolling when using trackpad (#1360)</li> <li>Fixes variable fonts loading</li> <li>Fixes Command modifier for input mappings, such as Command+C or Command+V on on MacOS (#1379).</li> <li>Fixes CSIu encoding of shift modifier produced characters (#1373).</li> <li>Fixes screen destruction on sibling cells when overwriting wide characters, such as Emoji, Kanji, etc.</li> <li>Changes VT sequence <code>DECSCUSR</code> (<code>CSI ? 0 SP q</code> and <code>CSI ? SP q</code>) to reset to user-configured cursor style (#1377).</li> <li>Remove <code>contour-latest</code> terminfo file. Please use <code>contour</code> terminfo instead.</li> <li>Adds <code>Command</code> as modifier to input mappings on MacOS to work along with <code>Meta</code> for convenience reasons (#1379).</li> <li>Adds config option <code>profiles.*.margins</code> to allow customizing the horizontal / vertical margins (#1384).</li> <li>Adds config option for colorscheme <code>default.bright_foreground</code> and <code>default.dimmed_foreground</code> to configure bright and dimmed default foreground text respectively (#1383).</li> </ul>"},{"location":"release-notes/#040-2023-12-19","title":"0.4.0 (2023-12-19)","text":"<ul> <li>Fixes GUI terminating on idle input in some conditions.</li> <li>Fixes search term rendering highlighting for search terms containing whitespaces (#966).</li> <li>Fixes rendering in cases of glyphs with inverted orientation (#1115).</li> <li>Fixes Emoji rendering being too small on macOS (#1215)</li> <li>Fixes config option <code>show_title_bar</code> (#1153)</li> <li>Fixes VT sequence DECSTBM and DECSLRM defaulting parameters (#1164).</li> <li>Fixes VT sequence DECFRA (#1189).</li> <li>Fixes VT sequence DECSCPP and DECCOLM (#1205).</li> <li>Fixes VT sequence DECALN to properly reset margins when statusline is shown</li> <li>Fixes VT sequence ED (CSI J) when statusline is shown.</li> <li>Fixes VT sequence SM ?1003 (Any Event mouse tracking) not reporting mouse move events.</li> <li>Fixes VT sequence XTWINOPS (<code>CSI 22 t</code> and <code>CSI 23 t</code>) to not assert and terminate the terminal but default to missing paramter <code>0</code> instead (#1369).</li> <li>Fixes VT sequences CUU/CUD/CUF/CUB to better respect margins (#1201)</li> <li>Fixes printing over 2nd cell of a wide character should delete wide character (#1268)</li> <li>Fixes URI re-encoding of local files in <code>OSC 8</code> (#1199)</li> <li>Fixes LCD subpixel rendering for overly wide US-ASCII glyphs (#1022)</li> <li>Fixes alive process when GUI is closed</li> <li>Fixes vi mode <code>f</code> action freeze on last line</li> <li>Fixes AltGr handling on Windows (#150)</li> <li>Fixes rarely happening bad access to GPU texture atlas (#1309)</li> <li>Fixes terminal session not being terminated when the process terminated, but the PTY handle was still open (e.g. by other processes).</li> <li>Fixes setting window class (<code>app_id</code>) on Wayland (#1336)</li> <li>Fixes screen margins not being shared across primary and alt screen, as it should be.</li> <li>Do not clear search term when entering search editor again.</li> <li>Clear search term when switch to insert vi mode (#1135)</li> <li>Delete dpi_scale entry in configuration (#1137)</li> <li>Removes the ability to inline colorschemes within a configuration profile. Colorschemes must now always be referenced by their name.</li> <li>Moves the vi-like cursor with the viewport when scrolling up/down.</li> <li>Adds normal mode motion <code>Ctrl+e</code> and <code>Ctrl+y</code> to vertically move the viewport.</li> <li>Adds the ability to chose a color scheme based on the operating systems's dark/light mode setting. This will change live whenever the OS's dark/light mode setting changes as well (#604).</li> <li>Adds VT sequence DECSSCLS (change scroll speed) and properly handle DECSCLM (enable slow scrolling mode) (#1204)</li> <li>Adds VT sequence parameter ?996 to DSR to request a report of current color scheme dark/light mode hint.</li> <li>Adds VT sequence <code>SM ?2031</code> and <code>RM ?2031</code> to enable/disable unsolicited DSR for color scheme updates by the user or OS.</li> <li>Adds support the extended <code>CSIu</code> keyboard protocol to better report key modifiers.</li> <li>Adds extended keyboard protocol support (CSI u) to better report key modifiers.</li> <li>Adds support vor horizontal mouse scrolling event reporting sequences.</li> <li>Adds percentage value to Indicator Statusline to indicate scroll offset in scrollback buffer.</li> <li>Adds inheritance of profiles in configuration file based on default profile (#1063).</li> <li>Adds config option <code>profiles.*.bell</code> to adjust BEL behavior (#1348) and fixes (#1162) and (#1163).</li> <li>Adds config option <code>profiles.*.frozen_dec_modes</code> to permanently enable/disable certain DEC modes.</li> <li>Adds config option <code>profiles.*.option_as_meta</code> to allow remapping Option key to Alt on MacOS.</li> <li>Adds config option <code>profiles.*.ssh</code> to allow connecting to an SSH server directly from Contour.</li> <li>Adds capital <code>A</code> and <code>I</code> keys to switch from normal mode back to insert mode, too.</li> <li>Adds size indicator window on resize (#1203).</li> <li>Adds config entry <code>profile.*.size_indicator_on_resize</code> to control size indicator on resize and makes resize indicator small.</li> <li>Adds OpenSelection action, and honor case in the configuration bindings</li> <li>Adds open resource (URL, local file) feature also to vi mode.</li> <li>Adds configurable window alerts on terminal bells.</li> </ul>"},{"location":"release-notes/#0312-2023-05-29","title":"0.3.12 (2023-05-29)","text":"<ul> <li>Fixes terminfo <code>tsl</code> to how todays apps are using it (e.g. zsh) to simply set the window title.</li> <li>Fixes selecting a single character not working easily (#1066).</li> <li>Fixes cycling between different selection modes (by speed-clicking) not properly working.</li> <li>Fixes tcsh shell integration not working (#1074).</li> <li>Fixes <code>[count]w</code> ignoring the <code>[count]</code> parameter in modal mode.</li> <li>Fixes statusline being misplaced after resize when being in alt screen (#1091).</li> <li>Fixes hyperlinks with IDs (#1088)</li> <li>Fixes hyperlink highlight when screen has been scrolled (#1084)</li> <li>Fixes cursor shape changes when entering vi-like normal mode or visual mode.</li> <li>Improves mouse selection to be more natural extending into new grid cells.</li> <li>Modal mode: Improves how <code>[m</code> jumps from the current prompt to the next prompt above it.</li> <li>Adds <code>profiles.*.permissions.display_host_writable_statusline</code> to allow the user to intervene in <code>DECSSDT 2</code> VT sequence to show the host writable statusline.</li> <li>Adds config entry <code>input_method_editor</code> colorscheme key to allow customization of the IME (input method editor) region (#1058).</li> <li>Adds <code>gui.shader</code> log option for the output of shader configuration procedure (#715).</li> <li>Adds config entry <code>profiles.*.status_line.position</code> to change statusline position to be either bottom (default) or top.</li> <li>Adds config entry <code>profiles.*.status_line.sync_to_window_title</code> to synchronize the window title with the host writable statusline (if it was denied to be shown).</li> <li>Linux: Adds support for writing to utmp/wtmp.</li> <li>Extends <code>ViNormalMode</code> to toggle between insert and normal mode rather than just entering normal mode.</li> <li>Modal mode: Adds Return key to also move the cursor down (like vim).</li> <li>Model mode: Adds text object <code>im</code> and <code>am</code> to select the range between two line marks.</li> <li>Model mode: Adds handling of <code>Home</code> and <code>End</code> keys (#1098).</li> </ul>"},{"location":"release-notes/#0311-2023-03-01","title":"0.3.11 (2023-03-01)","text":"<ul> <li>Fixes normal mode motion <code>J</code> and <code>K</code> that got accidentally unimplemented and make it also available to visual mode.</li> <li>Fixes use of config <code>bypass_mouse_protocol_modifier</code> that was ignored.</li> <li>Fixes abnormal termination on incomplete foreground/background color-pair specification.</li> <li>Fixes <code>SendChars</code> input acion to actually send the chars as-is to the standard input of the connected application.</li> <li>Fixes mouse selection to only be initiated if actually meant to, i.e. in alt screen mode only if bypass-modifier was pressed (#1017).</li> <li>Fixes mouse selection within scrolloff setting to not cause the viewport to jump anymore (#1019).</li> <li>Fixes rendering sixel image when status line is active (#1050).</li> <li>Adds normal mode motion <code>[[</code>, <code>]]</code>, <code>[]</code>, <code>][</code> mimmicking exactly what vim does.</li> <li>Adds normal mode motion <code>[m</code> and <code>]m</code> to jump line marks up/down.</li> <li>Adds normal mode motion <code>mm</code> to toggle the line mark at the current active cursor position.</li> <li>Adds normal mode motion <code>t{char}</code>, <code>T{char}</code>, <code>f{char}</code>, <code>F{char}</code>, <code>;</code>, <code>,</code> to move cursor in line till before/after or to given <code>{char}</code>.</li> <li>Adds config entry <code>vi_mode_highlight</code> to color palette to highlight current cursor's line when not in insert mode (aka. in Vi-mode).</li> <li>Adds shell integration for fish shell.</li> <li>Adds shell integration for tcsh shell.</li> <li>Improve performance of parsing UTF-8 text on ARM64 platfroms through the use SIMD instructions.</li> <li>Contour can now run on platforms not supporting hardware crypto extension for ARM64 nor AES-NI for x86-64. Hardware acceleration support can be configured to be included at compile time.</li> <li>Fixes scroll up when infinte history limit is set</li> </ul>"},{"location":"release-notes/#0310-2023-01-22","title":"0.3.10 (2023-01-22)","text":"<ul> <li>Fixes <code>initial_working_directory</code> setting being ignored (#946).</li> <li>Fixes background image being accidentally inverted (Bug introduced in 0.3.3.204).</li> <li>Fixes crash in some corner cases of too small fonts (#949).</li> <li>Fixes linefeed not inheriting graphics attributes when scrolling up to create a new line (#945).</li> <li>Fixes normal mode's motion <code>[count]|</code> that was off by one.</li> <li>Fixes switching to normal mode sometimes placing the vi cursor wrong.</li> <li>Fixes vi-like normal mode's word motions <code>w</code>, <code>e</code>, and <code>b</code> to better emulate vim's behaviour.</li> <li>Fixes copying text to clipboard stripping TAB-character generated spaces (#982).</li> <li>Fixes <code>BEL</code>'s audio feedback not working on some platform by streamlineing the behaviour with a custom bell sound.</li> <li>Adds new config option <code>word_highlight_current</code> and <code>word_highlight_other</code> to better distinguish between double-click initiated word highlights and actual searches / selections.</li> <li>Adds trace mode to single-step through each VT sequence. New actions: <code>TraceEnter</code>, <code>TraceLeave</code>, <code>TraceStep</code>, <code>TraceBreakAtEmptyQueue</code> and new mode flag <code>Trace</code>.</li> <li>Adds implementation for <code>SO</code> and <code>SI</code> control codes.</li> <li>Adds ability to explicitly disable a font feature by prefixing the feature with a <code>-</code>, such as <code>-calt</code>, explicitly enabling via <code>+</code> prefix was added as well.</li> <li>Adds terminal capability <code>hs</code> and <code>es</code> to improve status-line feature detection via terminfo.</li> <li>Adds normal mode motion: <code>B</code>, <code>B</code>, <code>E</code>.</li> <li>Adds support for mouse in normal mode for selection and normal-mode's cursor placement.</li> <li>Changes terminfo entries <code>tsl</code>, <code>fsl</code> and <code>dsl</code> to make use of the host-writable statusline.</li> <li>Improvements to text objects in vi-like normal mode (<code>i)</code>, <code>a)</code>, <code>i&gt;</code>, <code>a&gt;</code>, <code>i]</code>, <code>a]</code>, <code>i}</code>, <code>a}</code>).</li> <li>Improvements to vi-like normal mode: yank-motions (<code>yw</code>, <code>y$</code>, etc).</li> <li>Improvements to vi-like normal mode: support nested matching pairs, such as <code>{</code>, <code>(</code> etc in text objects.</li> <li>Improvements to vi-like normal mode: Add <code>%</code> motion to jump to matching symbol pairs.</li> <li>Improvements to vi-like normal mode: Add <code>M</code> motion to jump to middle screen line (same column).</li> <li>Improvements to vi-like normal mode: Add <code>P</code> to paste the clipboard with newlines stripped.</li> <li>Improvements to vi-like normal mode: Add <code>SP</code> and <code>BS</code> to move left/right.</li> </ul>"},{"location":"release-notes/#039-2022-12-24","title":"0.3.9 (2022-12-24)","text":"<ul> <li>Fixes statusline clock to show the correct local time.</li> <li>Fixes running within OpenGL/ES context.</li> <li>Fixes failing startup due to <code>background_image.path</code> pointing to a non-existing file (#928).</li> <li>Fixes terminfo entries <code>Se</code>, and adds missing entries <code>Rmol</code>, <code>Sync</code> (#936).</li> <li>Fixes rendering glitches (reverting PR #918 until a better solution has been found).</li> <li>Fixes loading TTC (TrueType Collection) font files not honor which face to load within the collection (#939).</li> <li>Adds config entry <code>mouse.hide_while_typing</code> to specify mouse behavior while typing whether hide it or not.</li> <li>Adds config entry <code>indicator_statusline_inactive</code> colorscheme key to colorize the status line differently when the terminal is currently not in focus.</li> </ul>"},{"location":"release-notes/#038-2022-12-18","title":"0.3.8 (2022-12-18)","text":"<ul> <li>Fixes restoring the cursor visibility after leaving alternate screen when application wasn't restoring mode switches in reverse order.</li> <li>Fixes country flags rendering due to misleading grapheme cluster segmentation in corner cases.</li> <li>Fixes mouse reporting in primary screen when viewport has been scrolled into the scrollback area.</li> <li>Fixes VT sequence <code>DECSTR</code> (soft reset) to not move the cursor to home position.</li> <li>Fixes cursor movements for the vi-like cursor (normal mode).</li> <li>Fixes Alt+Backspace on macOS.</li> <li>Fixes default config entry <code>profiles.*.draw_bold_text_with_bright_colors</code> (it was renamed from <code>profiles.*.bold_is_bright</code>). Please rename this in your existing configuration if not done yet.</li> <li>Fixes sometimes rendering two cursors when statusline is shown.</li> <li>Fixes normal mode's page top (S-H)/ page bottom (S-L) cursor movements to respect scroll offset.</li> <li>Fixes VT sequences <code>RIS</code> and action <code>ClearHistoryAndReset</code> when statusline is shown.</li> <li>Fixes cursor going beyond the terminal screnn in vim mode, move right motion (#917).</li> <li>Fixes selection while statusline is shown. (#910)</li> <li>Improves hard-reset (<code>RIS</code>) to restore initial statusline state.</li> <li>Improves <code>$</code> motion in vi-like normal mode to point to the last non-empty grid cell in the current line instead of the right page margin.</li> <li>Vi Mode search can handle line wrapping and searchText larger than line length (#869) (#870).</li> <li>Adds ability to highlight same words on double click via <code>profile.*.highlight_word_and_matches_on_double_click</code>.</li> <li>Adds color scheme key <code>indicator_statusline.foreground</code> and <code>indicator_statusline.background</code> to customize indicator statusline colors.</li> <li>Adds clock to indicator status line.</li> <li>Adds current viewport position in scrollback buffer to indicator status line.</li> <li>Adds optional parameter <code>strip</code> to PasteClipboard configuration action to allow stripping newlines and normalizing whitespaces.</li> <li>EXPERIMENTAL: Adds VT extension to enable passive mouse tracking via <code>CSI ? 2029 h</code> / <code>CSI ? 2029 l</code>. Passive mouse tracking enables the application to get notified on mouse events while still allowing mouse selection.</li> <li>EXPERIMENTAL: Adds VT extension to enable text selection tracking via <code>CSI ? 2030 h</code> / <code>CSI ? 2030 l</code>.</li> </ul>"},{"location":"release-notes/#037-2022-11-01","title":"0.3.7 (2022-11-01)","text":"<ul> <li>Fixes display of non-insert mode (vi-like) cursor on monochrome lines.</li> <li>Fixes cursor movements on wide characters for the vi-like cursor.</li> <li>Fixes TERM value resolving in Flatpak environment when not escaping the sandbox.</li> </ul>"},{"location":"release-notes/#036-2022-10-30","title":"0.3.6 (2022-10-30)","text":"<ul> <li>Fixes ground-state infinite loop in corner case + refactor and tiny optimization.</li> <li>Fixes assertion in optimized bulk text processing.</li> <li>Fixes rare displacement of characters following a wide character (e.g. Emoji) in some cases.</li> <li>Fixes IME (input method editor) background rendering for wide characters (e.g. Kanji).</li> <li>Fixes <code>escape_sandbox</code> config option that wasn't set to <code>true</code> by default as documented.</li> <li>Improve throughput performance for scroll-up when custom vertical margins are in effect.</li> <li>Improve rendering performance slightly for so called trivial lines.</li> <li>Adds menu entry to Dolphin file manager to open Contour at current working directory.</li> </ul>"},{"location":"release-notes/#035-2022-10-21","title":"0.3.5 (2022-10-21)","text":"<ul> <li>Fixes a problem with oversized glyphs being wrongly cut off (#821).</li> <li>Fixes Sixel handling of non-standard aspect ratio (#827).</li> <li>Fixes Sixel mode, when updating the color palette with a new color, that color must also be used for subsequent paints.</li> <li>Fixes vertical cursor movement for Sixel graphics with only newlines (#822).</li> <li>Fixes Sixel rendering for images with aspect ratios other than 1:1.</li> <li>Fixes Sixel rendering for images that show below but should be rendered above text (#831).</li> <li>Fixes cursor highlight in VI mode</li> <li>Removes <code>images.sixel_cursor_conformance</code> config option.</li> <li>Adds VT sequence DECSCA, DECSEL, DECSED and DECSERA to support protected grid areas during erase operations (#29, #30, #31).</li> <li>Improve Input Method (IME) handling, visualizing preedit-text.</li> <li>Improve throughput performance of arbitrary complex Unicode.</li> <li>Update Unicode data to version 15.0.0 (release). See Announcing The Unicode\u00ae Standard, Version 15.0.0.</li> </ul>"},{"location":"release-notes/#034-2022-09-13","title":"0.3.4 (2022-09-13)","text":"<ul> <li>Fixes selection magically deselecting when indicator status line was shown and the top page line was selected.</li> <li>Fixes interpretation of VT sequence DECSDM to disable Sixel auto-scrolling, if enabled.</li> <li>Fixes visibility of the cursor in some situation when blending too much into the background color.</li> <li>Fixes dim/faint coloring to not affect background and default text coloring when feint SGR attribute is set (#786).</li> <li>Fixes SGR 9 (crossed out) and 53 (overline) to both look like underline.</li> <li>Fixes size of drawn sixel image if no size is given beforehand (#809).</li> <li>Fixes glyph rendering for some unexpectly oversized glyphs (#423).</li> <li>Adds <code>line#24</code> to terminfo file for backwards compatibility.</li> <li>Adds configuration key <code>live_config</code> to determine whether or not to reload running terminal instances on every config file change.</li> <li>Adds DEC-mode 2027 for enabling/discovering Unicode support as per draft specification (Terminal Unicode Core).</li> <li>Adds <code>CreateDebugDump</code> action to dump terminal state for debugging purposes.</li> <li>[Flatpak] Adds configuration key <code>profiles.*.escape_sandbox</code> to decide whether or not to escape the sandbox.</li> <li>[Packaging] Adding AppImage files to Github release page and CI artifacts and bump Ubuntu packages using Ubuntu 22.04 LTS</li> <li>[Linux] Changes context menu icon for \"Run in Contour\" action to be the Contour logo.</li> <li>Improve startup-time by not pre-rasterizing all printable US-ASCII codepoints at once.</li> </ul>"},{"location":"release-notes/#033204-2022-08-30","title":"0.3.3.204 (2022-08-30)","text":"<ul> <li>Fixes a screen buffer manipulation bug that may happen on non-stylyzed but interactive command prompts (#787).</li> <li>Fixes viewport misalignment when in scrollback area white new lines are being added to the main page area.</li> <li>Fixes logging file toggle.</li> <li>Adds VT sequence <code>CSI 5m</code> (blink) and <code>CSI 6m</code> (rapid blink).</li> <li>Adds vim-like <code>scrolloff</code> feature to normal mode cursor movements to ensure a line padding when scrolling up/down.</li> <li>Adds vim-like incremental search functionality with realtime highlighting and cycling through the matches.</li> <li>Adds ability to initiate search via configuration action <code>SearchReverse</code> in input mappings.</li> <li>Adds ability to cancel highlighted search terms via configuration action <code>NoSearchHighlight</code> in input mappings.</li> <li>Adds input mapping mode <code>Search</code> to conditionally enable input mapping when a search term is present.</li> <li>Adds support for HSL colorspace in Sixel images.</li> <li>Adds configuration key <code>colorscheme.*.search_highlight</code> for coloring search matches.</li> <li>Adds configuration key <code>colorscheme.*.search_highlight_focused</code> for coloring the active search match, containing the cursor.</li> <li>Adds alpha value to <code>colorscheme.*.vi_mode_highlight</code> color configuration.</li> <li>Adds VT sequence for ANSI mode NLM (NewLine Mode).</li> <li>Always show indicator status line when ANSI mode KAM is enabled (which can be toggled via action <code>ToggleInputProtection</code>).</li> <li>Always show indicator status line when in non-insert mode.</li> <li>[Linux] Changes the .desktop file name and icon file name to conform to the flatpak recommendations.</li> <li>[Linux] Provide an AppStream XML file.</li> <li>[Linux] Drop KDE/KWin dependency on the binary by implementing enabling blur-behind background manually.</li> <li>[Linux] Adds support for blur-behind window on GNOME shell.</li> <li>[Flatpak] Also pass stdout-fastpipe (<code>3</code>) to shell.</li> <li>[Flatpak] Do not set controlling terminal in order to allow TTY abilities like Ctrl+C. This seems to be a known bug in flatpak.</li> <li>[Flatpak] Exposes TERMINFO environment variable pointing to a valid path containing the contour terminfo file.</li> <li>Changes behavior of PTY (and shell process) creation until only when a PTY is required by the terminal emulator during instanciation, possibly avoiding problems with xdotool running too early.</li> <li>Internal: Y-axis inverted to match GUI coordinate systems where (0, 0) is top left rather than bottom left.</li> </ul>"},{"location":"release-notes/#032202-2022-07-07","title":"0.3.2.202 (2022-07-07)","text":"<ul> <li>Fixes writing to a non-empty line sometimes destroying the contents of that line (#702).</li> <li>Fixes underline decoration for wide character cells.</li> <li>Fixes SGR 8 (Conceal/Hidden) attribute doesn't work as expected (#699).</li> <li>Fixes Synchronized Updates (<code>SM/RM ? 2026</code>) sometimes lagging behind in rendering.</li> <li>Fixes SGR and text breakage when altering charsets via <code>ESC ( 0</code> VT sequence (#661).</li> <li>Fixes SEGV when closing the terminal via GUI close button.</li> <li>Fixes scrolling in alt-screen.</li> <li>Fixes VT sequence for setting indexed color from palette.</li> <li>Fixes some config false positives error messages.</li> <li>Fixes command line arguments parser handling of <code>--</code> for switching to verbatim mode (#670).</li> <li>Fixes rendering of U+E0B2 \ue0b2 in pixel-perfect box drawing mode (#707).</li> <li>Fixes rendering of cursor sometimes being almost invisible when foreground and background colors are similar/equal (#691).</li> <li>Fixes line based selection sometimes not selecting the full line when wrapped over multiple lines.</li> <li>Fixes warning message on terminal's console output when enabling blurred background images.</li> <li>Fixes Win32 command output: Attaches to parent console if present, so typing <code>contour help</code> in a terminal actually shows something.</li> <li>Changes <code>XTSMGRAPHICS</code> to match implementation of xterm exactly when querying sixel image limits, to be capped at terminal viewport dimensions (#656).</li> <li>Changes CLI syntax for <code>contour parser-table</code> to <code>contour generate parser-table</code>.</li> <li>Implements UTF-8 encoded mouse transport (<code>CSI ? 1005 h</code>)</li> <li>Modal mode: Improved vi-like input modes.</li> <li>Modal mode: Fixed the text cursor not being visible during selection.</li> <li>Modal mode: Don't leak but actually support cursor keys up/down/left/right/page-up/page-down.</li> <li>Modal mode: Added <code>vip</code>, <code>vap</code> (and <code>yip</code> / <code>yap</code>) motions.</li> <li>Modal mode: Adds <code>^</code> motion.</li> <li>Modal mode: When being in normal mode, pressing <code>a</code> also puts you back to insert mode.</li> <li>Modal mode: Properly show cursor if it was hidden in insert mode and restore visibility &amp; shape when going back to insert mode.</li> <li>Modal mode: Shift+K and Shift+J don't just move the cursor up/down but also move the terminal's viewport respectively (inspired by tmux).</li> <li>Modal mode: Shift+H and Shift+L to move cursor to the current viewport's page top/bottom (inspired by tmux).</li> <li>Modal mode: and more...</li> <li>Adds new config option <code>profile.*.vi_mode_highlight_timeout</code> and <code>colorscheme.*.vi_mode_highlight</code> and adds cell highlighting on yank (#669).</li> <li>Adds support for running on ARMv8 platform with crypto extensions (#611).</li> <li>Adds back support OpenGL ES (3.1).</li> <li>Adds E3 capability, so <code>clear</code> now defaults to clearing screen and scrollback (#693).</li> <li>Adds specialized PTY implementation for Linux operating system utilizing OS-specific kernel APIs.</li> <li>Adds basic support for Indicator status line and their VT sequences <code>DECSASD</code> and <code>DECSSDT</code>, and <code>DECRQSS</code> has been adapted (#687).</li> <li>Adds configuration option <code>profiles.*.status_line.display</code> to be either <code>none</code> or <code>indicator</code> to reflect the initial state of the status line (more customizability of the Indicator status-line will come in future releases).</li> <li>Adds new action <code>ToggleInputProtection</code> to protect terminal application against accidental input (#697).</li> <li>Adds configuration options <code>logging.enabled</code> as well as <code>logging.file</code>.</li> <li>Adds VT sequences <code>XTPUSHCOLORS</code>, <code>XTPOPCOLORS</code>, <code>XTREPORTCOLORS</code> (#714).</li> <li>Adds CLI syntax <code>contour info vt</code> to print list of supported VT sequences (#730).</li> <li>Adds VT sequence <code>DECPS</code> (#237).</li> <li>Adds new config option <code>colorscheme.selection.foreground_alpha</code> and <code>colorscheme.selection.background_alpha</code> to enable somewhat more eye-candy visual looks on text selection.</li> <li>Extends config option <code>colorscheme.selection.foreground</code> and <code>colorscheme.selection.background</code> to also accept <code>CellForeground</code> and <code>CellBackground</code> as value.</li> </ul>"},{"location":"release-notes/#031200-2022-05-01","title":"0.3.1.200 (2022-05-01)","text":"<ul> <li>Adds Vi-like input modes for improved selection and copy'n'paste experience.</li> <li>Adds contour executable to search path for spawned shell process on macOS and Windows.</li> <li>Adds customizability to dim colors (#664).</li> <li>Adds the profile configuration option: <code>draw_bold_text_with_bright_colors</code>.</li> <li>Fixes <code>CSI K</code> accidentally removing line flags, e.g. line marks (#658).</li> <li>Fixes wrong-spacing rendering bug on some lines.</li> <li>Fixes assertion on font resize when a (Sixel) image is currently being rendered (#642).</li> <li>Fixes assertion on too quick shell terminations (#647).</li> <li>Fixes fallback shell execution on UNIX-like systems when the reuqested shell cannot be spawned (#647).</li> <li>Fixes selection being wrongly rendered when viewport is scrolled (#641).</li> <li>Fixes full-line selection not properly injecting linefeeds between the lines.</li> <li>Changes behaviour of full-line selection to include a trailing linefeed for the last line (#641).</li> <li>Changes behaviour of bold text to by rendered using normal colors by default (was forced to bright before, and is now configurable via <code>draw_bold_text_with_bright_colors</code>).</li> </ul>"},{"location":"release-notes/#030198-2022-04-18","title":"0.3.0.198 (2022-04-18)","text":"<p>TLDR; Many thanks to all for the great support and feedback. This release marks a huge milestone for me especially with regards to VT backend performance(!), improved rendering architecture, and a more complete list of pixel perfect box drawings.</p> <ul> <li>Fixes installation from <code>.deb</code> (missing terminfo dependency)</li> <li>Fixes PTY write race condition.</li> <li>Fixes VT sequence <code>DECFI</code>.</li> <li>Fixes VT sequence <code>ICH</code> (#559).</li> <li>Fixes VT sequence <code>OSC 4</code>'s response.</li> <li>Fixes VT sequence <code>OESC 4</code> to also support setting color via <code>#RRGGBB</code>.</li> <li>Fixes VT sequence extension: capture buffer (#493).</li> <li>Fixes <code>DECRC</code> with respect to <code>DECSTBM</code> enabled and <code>DECOM</code> being inverted interpreted.</li> <li>Fixes <code>XTGETTCAP</code> (#582).</li> <li>Fixes <code>SU</code> in combination with <code>DECLRM</code> (#593).</li> <li>Fixes an assertion in text renderer.</li> <li>Fixes wrongly advertising DEC locator mode (it is not supported).</li> <li>Improved VT backend performance (#342).</li> <li>Improved text selection behaviour.</li> <li>Improved detection of runtime DPI changes for KDE (Plasma) desktop environment.</li> <li>Improves Window manipulation VT sequence for saving/restoring window title (<code>CSI 22 ; Ps t</code>, <code>CSI 23 ; Ps t</code>)</li> <li>Adds pixel-perfect box-drawing for U+EE00 .. U+EE05 for progress bar glyphs as first introduced by Fira Code (#521).</li> <li>Adds pixel-perfect box-drawing for U+E0B0, U+E0B2, U+E0BA (Triangle Powerline glyphs).</li> <li>Adds preliminary implementation of <code>DA3</code> VT sequence.</li> <li>Adds new configuration option <code>mouse_block_selection_modifier</code>.</li> <li>Adds new configuration option <code>profiles.*.copy_last_mark_range_offset</code> (default <code>0</code>) to adjust where to start looking upwards for the <code>CopyPreviousMarkRange</code> action. This is useful for multi-line prompts.</li> <li>Adds new configuration option <code>platform_plugin</code>.</li> <li>Adds new configuration option <code>renderer.backend</code> for explicitly setting renderer to one of: <code>OpenGL</code>, <code>software</code>, <code>default</code>.</li> <li>Adds new configuration option <code>renderer.tile_hashtable_slots</code> to configure texture atlas hashtable capacity.</li> <li>Adds new configuration option <code>renderer.tile_cache_count</code> to configure texture atlas cache capacity.</li> <li>Adds new configuration option <code>renderer.tile_direct_mapping</code> to enable/disalbe texture atlas direct mapping.</li> <li>Adds new colorscheme setting <code>background_image.path</code> and <code>background_image.opacity</code> to optionally render a terminal background image.</li> <li>Adds stdout-fastpipe support on new shell file descriptor <code>3</code> and exposing availability via environment variable <code>STDOUT_FASTPIPE</code> (with value <code>3</code>). When writing to this file descriptor rather than to stdout (file descriptor <code>1</code>), the full performance of Contour can be explored.</li> <li>Adds new configuration option <code>pty_buffer_size</code> for tweaking the new size in bytes for the PTY buffer objects.</li> <li>Adds <code>mock</code> font locator (mostly interesting for advanced use for CI testing).</li> <li>Adds VT sequence <code>SM ? 8452 h</code> / <code>RM ? 8452 l</code> for enabling/disabling sixel cursor placement conformance (xterm extension).</li> <li>Adds SGR-Pixels support, VT sequence <code>SM ? 1016 h</code> / <code>RM ? 1016 l</code> (#574).</li> <li>Adds VT sequence DECCARA, Change Attributes in Rectangular Area, with the extension that it applies to all SGR attributes. (#15).</li> </ul>"},{"location":"release-notes/#023183-2022-01-09","title":"0.2.3.183 (2022-01-09)","text":"<p>Important: It is recommended to also use the latest <code>contour</code> termcap file if you are already using one from a previous release.</p> <ul> <li>Fixes Sixel image rendering when scrolling is needed and ANSI cursor is not on left margin.</li> <li>Fixes Qt-related CLI options that that were largely ignored.</li> <li>Fixes crash caused by VT sequence PM and SOS (#513).</li> <li>Fixes parsing VT sequence RGB color parsing for cell decoratioins (e.g. underline).</li> <li>Fixes double-underline to not look like a very thick line on small font sizes.</li> <li>Applies antialiasing to curly underline.</li> <li>Changes <code>contour</code> exit code to reflect the shell's exit code of the last closed window.</li> <li>Improves text cursor rendering and extends cursor configuration accordingly (#526).</li> <li>Improves visual appearance of dotted underline SGR.</li> <li>Adds CLI option <code>terminal early-exit-threshold SECS</code> (defaulting to 6) to only report and wait if the process did exit below this threshold seconds.</li> <li>Adds CLI option <code>terminal dump-state-at-exit</code> to auto-dump internal state at exit.</li> <li>Adds support for CoreText for matching font descriptions and font fallback (#479).</li> <li>Adds support for font feature settings. This is currently only implemented for <code>openshaper</code>, not yet for <code>dwrite</code> (#520).</li> <li>Adds pixel-perfect box-drawing for U+E0B4, U+E0B6, U+E0BC, U+E0BE (some Powerline extended codepoints).</li> </ul>"},{"location":"release-notes/#022175-2021-11-19","title":"0.2.2.175 (2021-11-19)","text":"<ul> <li>Fixes input mapping containing <code>Control</code> modifier.</li> <li>Fixes input mapping mode <code>Select</code> being ignored.</li> <li>Fixes Modifier+Enter input mapping not being catched.</li> <li>Fixes slant detection for DirectWrite.</li> <li>Changes <code>DECCOLM</code> to only switch back to 80 when it was 132 before.</li> <li>Adds new config option <code>spawn_new_process</code> to define new terminal window behavior.</li> <li>Adds action <code>CancelSelection</code> to allow actively canceling selection via input mappings.</li> <li>Adds key bindings to default configuration to allow simply pressing Ctrl+C/Ctrl+V (without Shift modifier) when an active selection is present.</li> <li>Adds process current working directory on macOS.</li> <li>Adds <code>contour license</code> CLI command to show project license but also an overview of all dependencies.</li> <li>Adds a proper CLI to <code>bench-headless</code>. Building the headless benchmark tool is not shipped by default.</li> </ul>"},{"location":"release-notes/#021174-2021-11-14","title":"0.2.1.174 (2021-11-14)","text":"<ul> <li>Reverts change from 0.2.0: \"Changes behaviour when receiving <code>U+FE0E</code> (VS15) to not enforce the width of 1 but leave it as is (usually 2). This seems to match what the web browser is doing, too.\"</li> <li>Adds support for loading terminal color schemes from an external file, such as <code>~/.config/contour/colorschemes/onedark.yml</code> for the scheme <code>onedark</code> (file file format is simply a sub-tree of how colors can be specified inline).</li> <li>Adds some more tmux-extension entries to the terminfo database that are supported by contour (<code>Ss</code>, <code>Se</code>, <code>Cs</code>, <code>Smol</code>, <code>Smulx</code>, <code>Setulc</code>).</li> <li>Adds <code>Sync</code> capability entry to terminfo file.</li> <li>Adds many more pixel-perfect graphical characters: <code>23A1</code>..<code>23A6</code>, <code>2580</code>..<code>2590</code>, <code>2594</code>..<code>259F</code>, <code>1FB00</code>..<code>1FB3B</code>, <code>1FB3C</code>..<code>1FBAF</code>, <code>1FBF0</code>..<code>1FBF9</code>.</li> <li>Adds support for building with embedded FreeType and HarfBuzz (experimental, disabled by default).</li> <li>Adds a shell early-exit-guard to not instantly close the terminal window but print a message instead and wait for any key press in order to close.</li> <li>Adds missing config option <code>read_buffer_size</code> to default <code>contour.yml</code>.</li> <li>Adds new config option <code>reflow_on_resize</code> to mandate whether or not text reflow is enabled on primary screen. If this option is false, it cannot be enabled programmatically either.</li> <li>Adds new config option <code>on_mouse_select</code> to decide what action to pick when text has been selected (copy to clipboard or copy to selection-clipboard, or do nothing)</li> <li>Unicode data updated to version 14.0 (release). See Announcing The Unicode\u00ae Standard, Version 14.0.</li> <li>Do not force OpenGL ES on Linux anymore.</li> <li>Changes default (Sixel) image size limits to the primary screen's pixel dimensions (#408).</li> <li>Changes font locator engine default on Windows to DirectWrite (#452).</li> <li>Changes tcap-query feature from experimental to always enabled (not configurable anymore).</li> <li>Automatically detect if <code>contour</code> or <code>contour-latest</code> terminfo entries are present use that as default.</li> <li>Fixes VT sequences that cause a cursor restore to sometimes crash.</li> <li>Fixes terminfo installation path on macOS and tries to auto-set <code>TERMINFO_DIRS</code> to it on startup (#443).</li> <li>Fixes terminfo entry <code>pairs</code>.</li> <li>Fixes SGR 24 to remove any kind of underline (#451).</li> <li>Fixes font fallback for <code>open_shaper</code> where in rare cases the text was not rendered at all.</li> <li>Fixes CPU load going up on mouse move inside terminal window (#407).</li> <li>Fixes terminfo entries accidentally double-escaping <code>\\E</code> to <code>\\\\E</code> (#399).</li> <li>Fixes RGB color parsing via ':2::Pr:Pg:Pb' syntax and also adapt setrgbf &amp; setrgbb accordingly.</li> <li>Fixes SEGV with overflowing (Sixel) images (#409).</li> <li>Fixes XTSMGRAPHICS for invalid SetValue actions and setting Sixel image size limits (#422).</li> <li>Fixes internal pixel width/height tracking in VT screen, which did affect sizes of rendered Sixel images (#408).</li> <li>Fixes configuring a custom shell on macOS (#425).</li> <li>Fixes off-by-one bug in builtin box drawing (#424).</li> <li>Fixes assertion in text renderer with regards to colored glyphs.</li> <li>Fixes Sixel background select to support transparency (#450).</li> <li>Fixes session resuming on KDE desktop envionment which is respawing all Contour instances upon re-login but failed due to invalid command line parameters (#461).</li> <li>Fixes Meta+Key keyboard inputs being ignored.</li> <li>Changes DECSDM such that it works like a real VT340; also xterm, as of version 369, changed that recently (#287).</li> <li>Adds context menu support for KDE.</li> </ul>"},{"location":"release-notes/#020173-2021-08-17","title":"0.2.0.173 (2021-08-17)","text":"<ul> <li>Improved performance (optimized render loop, optimized grapheme cluster segmentation algorithm)</li> <li>Improves selection to better automatically deselect on selected area corruption.</li> <li>Fixes <code>ioctl(..., TIOCGWINSZ, ...)</code> pixel values that were only set during resize but not initially.</li> <li>Fixes mouse in VIM+Vimspector to also change the document position when moving the mouse.</li> <li>Fixes SGR decorations to use designated underline thickness and underline position.</li> <li>Fixes font glyph render in some corner cases where the rendered glyph did result in rectangle garbage on the screen.</li> <li>Fixes copying the selection containing trailing whitespaces.</li> <li>Fixes hard-reset with regards to default tab width.</li> <li>Fixes VT sequence <code>DECRQPSR</code> for <code>DECTABSR</code>.</li> <li>Fixes keyboard keys for <code>F1</code>..<code>F4</code> when pressed with and without modifiers.</li> <li>Fixes OSC 8 hyperlink rendering when scrolled.</li> <li>Fixes SGR 1 (bold) wrongly applied on indexed background colors.</li> <li>Fixes text shaping sometimes showing missing glyphs instead of the actual glyphs (by changing the last-resort font fallback mechanism to chape each cluster individually with its own font fallback).</li> <li>Preserve active profile when reloading config, and forces redraw after config reload.</li> <li>Changes config entry <code>profile.*.font_size</code> to <code>profile.*.font.size</code>.</li> <li>Changes config entries <code>scrollbar.*</code> to <code>profile.*.scrollbar.*</code>.</li> <li>Changes behavior of live configuration reload, which is not default anymore and must be explicitly enabled via CLI parameter <code>--live-config</code>.</li> <li>Changes behaviour when receiving <code>U+FE0E</code> (VS15) to not enforce the width of 1 but leave it as is (usually 2). This seems to match what the web browser is doing, too.</li> <li>Changes the CLI command line interface syntax.</li> <li>Removes <code>tab_width</code> configuration. Tab width cannot be configured anymore but remaints by default at 8.</li> <li>Adds basic automatically created archive for Arch Linux to the CI build artifacts page and release page.</li> <li>Adds support for bypassing the mouse protocol via Shift-click (configurable via <code>bypass_mouse_protocol_modifier</code>)</li> <li>Adds improved debug logging. via CLI flag <code>-d</code> (<code>--enable-debug</code>) to accept a comma seperated list of tags to enable logging for. Appending a <code>*</code> at the end of a debug tag will enable all debug tags that match prefix its prefix.  The list of available debuglog tags can be found via CLI flag <code>-D</code> (<code>--list-debug-tags</code>).</li> <li>Adds support for different font render modes: <code>lcd</code>, <code>light</code>, <code>gray</code>, <code>monochrome</code> in <code>profiles.NAME.font.render_mode</code> (default: <code>lcd</code>).</li> <li>Adds support for different text render engines: <code>OpenShaper</code>, <code>DirectWrite</code> and <code>CoreText</code> for upcoming native platform support on Windows (and later macOS).</li> <li>Adds support for different font location engines: <code>fontconfig</code> (others will follow).</li> <li>Adds experimental text reflow.</li> <li>Adds OpenFileManager action to configuration.</li> <li>Adds terminal identification environment variables <code>TERMINAL_NAME</code>, <code>TERMINAL_VERSION_TRIPLE</code> and <code>TERMINAL_VERSION_STRING</code>.</li> <li>Adds config option <code>mode</code> to input modifiers for additionally filtering based on modes (alt screen, app cursor/keypad, text selection modes, ...).</li> <li>Adds config option <code>profile.*.terminal_id: STR</code> to set the terminal identification to one of VT100, VT220, VT340, etc.</li> <li>Adds config option <code>profile.*.maximized: BOOL</code> to indicate maximized state during profile activation.</li> <li>Adds config option <code>profile.*.fullscreen: BOOL</code> to indicate fullscreen state during profile activation.</li> <li>Adds config option <code>profile.*.font.strict_spacing: BOOL</code> to indicate that only monospace fonts may be used.</li> <li>Adds config option <code>profile.*.font.TYPE.weight: WEIGHT</code> and <code>profile.*.fonts.TYPE.slant: SLANT</code> options (optional) along with <code>profile.*.fonts.TYPE.family: STRING</code>.</li> <li>Adds config option <code>profile.*.font.TYPE.weight: WEIGHT</code> and <code>profile.*.fonts.TYPE.slant: SLANT</code> options (optional) along with <code>profile.*.fonts.TYPE.family: STRING</code>.</li> <li>Adds config option <code>profile.*.font.dpi_scale: FLOAT</code> to apply some additional DPI scaling on fonts.</li> <li>Adds config option <code>profile.*.font.builtin_box_drawing: BOOL</code> to use pixel-perfect builtin box drawing instead of font provided box drawing characters.</li> <li>Adds config option <code>profile.*.refresh_rate: FLOAT</code> to configure how often the terminal screen will be rendered at most when currently under heavy screen changes. A value of <code>\"auto\"</code> will use the currently connected monitor's refresh rate.</li> <li>Adds configuration's action <code>ToggleAllKeyMaps</code> to enable/disable intercepting and interpreting keybinds. The one that did toggle it will not be disabled.</li> <li>Adds configuration's action <code>ClearHistoryAndReset</code> to clear the history, and resetting the terminal.</li> <li>Adds VT sequence for enabling/disabling debug logging. <code>CSI ? 46 h</code> and <code>CSI ? 46 l</code> and CLI option <code>-d</code>.</li> <li>Adds VT sequence for querying/setting current font <code>OSC 50 ; ? ST</code> and <code>OSC 50 ; Font ST</code> (and <code>OSC 60 Ps Ps Ps Ps Ps ST</code> for a more fine grained font query/setting control).</li> <li>Adds VT sequence <code>CSI 18 t</code> and <code>CSI 19 t</code> for getting screen character size. Responds with <code>CSI 8 ; $columns ; $rows t</code> and  <code>CSI 9 ; $columns ; $rows t</code> respectively.</li> <li>Adds VT sequence to capture the current screen buffer <code>CSI &gt; LineMode ; StartLine ; LineCount t</code> giving the respone back on stdin via <code>OSC 314 ; $screen_buffer ST</code>, and feature detection via <code>DA1</code> number <code>314</code>.</li> <li>Adds VT sequence <code>DECSNLS</code> for setting number of lines to display.</li> <li>Adds VT sequence <code>CSI Ps b</code> (<code>REP</code>) for repeating the last graphical character <code>Ps</code> times.</li> <li>Adds VT sequence <code>OSC 4 ; INDEX ; COLOR ST</code> for setting or querying color palette (if COLOR is <code>?</code> instead of a color spec).</li> <li>Adds VT sequence <code>OSC 104 ; INDEX ST</code> for resetting color palette entry or complete palette (if no (index is given).</li> <li>Adds VT sequence <code>DECCRA</code> to copy a rectangular area.</li> <li>Adds VT sequence <code>DECERA</code> to erase a rectangular area.</li> <li>Adds VT sequence <code>DECFRA</code> to fill a rectangular area.</li> <li>Adds VT sequence <code>CSI &gt; q</code> (XTVERSION) to query terminal identification (name and version). Response comes as <code>DCS &gt;| Contour ContourVersion ST</code>.</li> <li>Adds VT sequence <code>DECRQM</code> to request ANSI/DEC modes states (set / unset / not recognized).</li> <li>Adds new CLI command: <code>contour capture ...</code> to capture the screen buffer.</li> <li>Adds new CLI command: <code>contour set profile to NAME</code> to change the profile on the fly.</li> <li>Adds new CLI command: <code>contour generate terminfo output OUTPUT_FILE</code> to create a Contour terminfo file.</li> <li>Adds new CLI command: <code>contour generate config output OUTPUT_FILE</code> to create a new default config.</li> <li>Adds new CLI command: <code>contour generate integration shell SHELL output OUTPUT_FILE</code> to create the shell integreation file for the given shell (only zsh supported for now). Also adds a pre-generated shell integration file for Linux (and macOS) to <code>/usr/share/contour/shell-integration.zsh</code>.</li> <li>Unicode data updated to version 14.0 beta.</li> <li>Adds support for building with Qt 6 (disabled by default).</li> <li>Adds support for building with mimalloc (experimental, disabled by default).</li> </ul>"},{"location":"release-notes/#011-2020-12-31","title":"0.1.1 (2020-12-31)","text":"<ul> <li>Fixes race condition when displaying image animations (e.g. gifs via sixel).</li> <li>Fixes <code>NewTerminal</code> action to also inherit the active configuration file.</li> <li>Fixes restoring cursor position in <code>RM ?1049</code>.</li> <li>Fixes <code>DECSTR</code> resetting saved-cursor state and active cursor-position.</li> <li>Fixes selecting text not being pushed into the selection-clipboard.</li> <li>Adds VT sequence <code>OSC 7</code> (set current working directory).</li> <li>Adds VT sequence <code>DCS $ p $Name ST</code> to change config profile name to <code>$Name</code>.</li> </ul>"},{"location":"release-notes/#010-2020-12-24","title":"0.1.0 (2020-12-24)","text":"<ul> <li>Available on all 3 major platforms, Linux, macOS, Windows.</li> <li>Emoji support (-: \ud83c\udf08 \ud83d\udc9d \ud83d\ude1b \ud83d\udc6a :-)</li> <li>Font ligatures support (such as in Fira Code).</li> <li>Bold and italic fonts</li> <li>GPU-accelerated rendering.</li> <li>Vertical Line Markers (quickly jump to markers in your history!)</li> <li>Blurred behind transparent background when using Windows 10 or KDE window manager on Linux.</li> <li>Runtime configuration reload</li> <li>256-color and Truecolor support</li> <li>Key binding customization</li> <li>Color Schemes</li> <li>Profiles (grouped customization of: color scheme, login shell, and related behaviours)</li> <li>Clickable hyperlinks via OSC 8</li> <li>Sixel inline images</li> </ul>"},{"location":"configuration/","title":"Configuring Contour","text":""},{"location":"configuration/#configuring-contour","title":"Configuring Contour","text":"<p>Contour offers a wide range of configuration options that can be customized, including color scheme, shell, initial working directory, and more. The configuration options can be categorized into several groups:</p> <ul> <li>Global options: These settings determine the overall behavior of the terminal and apply to all profiles.</li> <li>Profiles: With profiles, you can configure the terminal more granularly and create multiple profiles that can be easily switched between.</li> <li>Color scheme: Contour allows you to define different color schemes for the terminal and choose which one to use for each of the profiles. </li> </ul> <p>On Unix systems, the main configuration file is located at  <code>~/.config/contour/contour.yml</code> and is both read from and auto-generated there. On Windows systems, the file is located at  <code>%LocalAppData%\\contour\\contour.yml</code>.</p> <p>Please note that on Unix systems, the environment variable <code>XDG_CONFIG_HOME</code> (by default set to <code>~/.config</code>) is taken into account.</p> <p>By default, on Unix systems, Contour is executed with the following arguments <code>contour config ~/.config/contour/contour.yml profile main</code>. If the configuration file includes a <code>default_profile</code> variable, it will be used as the default profile. Otherwise, the first profile listed in the file will be the default one.</p>"},{"location":"configuration/#how-to","title":"How to","text":""},{"location":"configuration/#load-specific-configuration-file","title":"Load specific configuration file","text":"<p><code>contour config /path/to/file/with/configuration.yml</code></p>"},{"location":"configuration/#set-profile-for-current-session","title":"Set profile for current session","text":"<p>you can utilize the <code>profile</code> parameter with the <code>contour</code> command  <code>contour profile one_of_profiles</code></p>"},{"location":"configuration/#global-options","title":"Global options","text":"<p>Let's go through the different sections of the global configurations in the file:</p>"},{"location":"configuration/#platform_plugin","title":"<code>platform_plugin</code>","text":"<p>option allows you to override the auto-detected platform plugin to be loaded. You can specify values like <code>auto</code>, <code>xcb</code>, <code>cocoa</code>, <code>direct2d</code>, or <code>winrt</code> to determine the platform plugin. The default value is <code>auto</code>.</p>"},{"location":"configuration/#renderer","title":"<code>renderer</code>","text":"<p>section contains configuration options related to the VT Renderer, which is responsible for rendering the terminal onto the screen. It includes the <code>backend</code> option to specify  the rendering backend, with possible values of <code>default</code>, <code>software</code>, or <code>OpenGL</code>. The other options in this section control the tile mapping and caching for performance optimization. </p>"},{"location":"configuration/#word_delimiters","title":"<code>word_delimiters</code>","text":"<p>option defines the delimiters to be used when selecting words in the terminal. It is a string of characters that act as delimiters.</p>"},{"location":"configuration/#extended_word_delimiters","title":"<code>extended_word_delimiters</code>","text":"<p>option defines the delimiters to be used when selecting words in the second time. It is a string of characters that act as delimiters. By default word delimiters are used.</p>"},{"location":"configuration/#pty_read_buffer_size","title":"<code>pty_read_buffer_size</code>","text":"<p>option specifies the default PTY read buffer size in bytes. It is an advanced option and should be used with caution. The default value is <code>16384</code>.</p>"},{"location":"configuration/#pty_buffer_object_size","title":"<code>pty_buffer_object_size</code>","text":"<p>option sets the size in bytes per PTY Buffer Object. It is an advanced option for internal storage and should be changed carefully. The default value is <code>1048576</code>.</p>"},{"location":"configuration/#default_profile_name","title":"<code>default_profile_name</code>","text":"<p>option determines the default profile to use in the terminal.</p>"},{"location":"configuration/#early_exit_threshold","title":"<code>early_exit_threshold</code>","text":"<p>option determines the early threshold time. If contour atempts to close earlier than specified threshold, additional message will be printed that contour terminated too early and additional key press is required to close contour.</p>"},{"location":"configuration/#spawn_new_process","title":"<code>spawn_new_process</code>","text":"<p>flag determines whether a new process should be spawned when creating a new terminal. The default value is <code>false</code>.</p>"},{"location":"configuration/#reflow_on_resize","title":"<code>reflow_on_resize</code>","text":"<p>option controls whether or not the lines in the terminal should be reflowed when a resize event occurs. The default value is <code>true</code>.</p>"},{"location":"configuration/#bypass_mouse_protocol_modifiers","title":"<code>bypass_mouse_protocol_modifiers</code>","text":"<p>option specifies the keyboard modifier (e.g., Shift) that can be used to bypass the terminal's mouse protocol and select screen content.</p>"},{"location":"configuration/#mouse_block_selection_modifiers","title":"<code>mouse_block_selection_modifiers</code>","text":"<p>option determines the modifier (e.g., Control) that needs to be pressed to initiate block selection using the left mouse button.</p>"},{"location":"configuration/#on_mouse_selection","title":"<code>on_mouse_selection</code>","text":"<p>option selects the action to perform when a text selection has been made. Possible values include <code>None</code>, <code>CopyToClipboard</code>, and <code>CopyToSelectionClipboard</code>.</p>"},{"location":"configuration/#live","title":"<code>live</code>","text":"<p>option determines whether the instance should reload the configuration files whenever they change. The default value is <code>false</code>.</p>"},{"location":"configuration/#experimental_features","title":"<code>experimental_features</code>","text":""},{"location":"configuration/#images","title":"<code>images</code>","text":"<p>section contains configuration options related to inline images. It includes options like <code>sixel_scrolling</code>, <code>sixel_register_count</code>, <code>max_width</code>, and <code>max_height</code> to control various aspects of image rendering and limits.</p>"},{"location":"configuration/#git_drawings","title":"<code>git_drawings</code>","text":"<p>fmt formatted doc thin</p>"},{"location":"configuration/#box_arc_style","title":"<code>box_arc_style</code>","text":"<p>fmt formatted doc round</p>"},{"location":"configuration/#braile_style","title":"<code>braile_style</code>","text":"<p>fmt formatted doc circle</p>"},{"location":"configuration/#default-global-parameters","title":"Default global parameters","text":"<pre><code>platform_plugin: auto\nrenderer:\n    backend: OpenGL\n    tile_hashtable_slots: 4096\n    tile_cache_count: 4000\n    tile_direct_mapping: true\nword_delimiters: \" /\\\\()\\\"'-.,:;&lt;&gt;~!@#$%^&amp;*+=[]{}~?|\u2502\"\nread_buffer_size: 16384\npty_buffer_size: 1048576\ndefault_profile: main\nspawn_new_process: false\nreflow_on_resize: true\nbypass_mouse_protocol_modifier: Shift\nmouse_block_selection_modifier: Control\non_mouse_select: CopyToSelectionClipboard\nlive_config: false\nimages:\n    sixel_scrolling: true\n    sixel_register_count: 4096\n    max_width: 0\n    max_height: 0\n</code></pre> <p>The default profile is automatically the top (first) defined profile in the configuration file, but can be explicitly set to an order-independant name using <code>default_profile</code> configuration key.</p>"},{"location":"configuration/#profiles","title":"Profiles","text":"<p>Profiles is the main part of user specific customizations, you can create more than one profile and chose which you want to use during startup or define in configuration file.</p> <p>By default each profile inherites values from <code>default_profile</code>. This means that you can specify only values that you want to change in respect to default profile, for example you can create new profile to use <code>bash</code> as a shell preserving other configuration from <code>main</code> profile </p><pre><code>profiles:\n    main:\n    # default profile here\n    bash:\n        shell: \"/usr/bin/bash\"\n</code></pre> <p>For the full list of options see generated configuration file on your system or Profiles section of documentation.</p>"},{"location":"configuration/#color-schemes","title":"Color Schemes","text":"<p>In contour you can specify different colors inside terminal, for example text background and foreground, cursor properties, selection colors and plenty others. You can configure your color profiles, whereas a color can be expressed in standard web format, with a leading # followed by red/green/blue values, 7 characters in total. You may alternatively use 0x as prefix instead of #. For example 0x102030 is equal to '#102030'.</p> <p>Syntax for color shemes repeat the one of profiles. First color scheme inside configuration file must be named <code>default</code>, each other color schemes inherit values from <code>default</code> color scheme. Example of configuration for <code>color_schemes</code> </p><pre><code>color_schemes:\n    default:\n    # values for default color scheme\n    different_selection:\n      selection:\n        background: '#fff0f0'\n</code></pre> <p>For the full list of options see generated configuration file on your system or Colors section of documentation.</p>"},{"location":"configuration/colors/","title":"Colors","text":"<p>Color scheme configure colors that are used inside terminal. To specify which color scheme you want to use you need to define the name of the scheme inside profile configuration or inline colors inside profile.</p>"},{"location":"configuration/colors/#color-scheme-configuration","title":"Color scheme configuration","text":"<p>Color configuration is set under <code>profiles</code> with <code>colors</code>. Then the scheme is defined under <code>color_schemes</code>.</p>"},{"location":"configuration/colors/#default","title":"<code>default</code>","text":"<p>section defines the default colors used in the terminal. </p><pre><code>color_schemes:\n  default:\n    default:\n      background: '#1a1716'\n      foreground: '#d0d0d0'\n      bright_foreground: '#ffffff'\n      dimmed_foreground: '#808080'\n</code></pre> background  determines the default background color of the terminal.  foreground  option sets the default foreground text color of the terminal.  bright_foreground  option sets the default foreground text color of the terminal when text text is instructed to be bold (/bright). This is only used if profile option <code>draw_bold_text_with_bright_colors</code> is set to <code>true</code> dimmed_foreground  option sets the default foreground text color of the terminal when text text is instructed to be dimmed."},{"location":"configuration/colors/#background_image","title":"<code>background_image</code>","text":"<p>section in the configuration file allows you to control various aspects of the background image feature. </p><pre><code>color_schemes:\n  default:\n    background_image:\n      path: '/path/to/image.png'\n      opacity: 0.5\n      blur: false\n</code></pre> path To specify the image file to use as the background, you need to provide the full path to the image. By default, the path option is set to an empty string, indicating that background image support is disabled.  opacity option controls the opacity of the background image. It determines how transparent or intense the image appears. The default value is 0.5, which provides a moderately transparent background. You can adjust this value to make the image more or less prominent, depending on your preferences.  blur option applies a blur effect to the background image. This can help reduce distractions and keep the focus on the terminal contents. By default, the blur option is set to false, indicating that background image blurring is disabled. If you want to enable it, set the value to true."},{"location":"configuration/colors/#cursor","title":"<code>cursor</code>","text":"<p>section in the configuration file let you customize the color of the cursor and optionally override the text color. </p><pre><code>color_schemes:\n  default:\n    cursor:\n      default: CellForeground\n      text: CellBackground\n</code></pre> default option allows you to specify the color of the cursor shape. By default, the default value is set to CellForeground, which means the cursor color will be the same as the cell's foreground color. You can change this value to any valid RGB color or use the special options CellForeground or CellBackground.  text allows you to specify the color of the characters that would be covered by the cursor shape. This is useful for ensuring readability when the cursor overlaps with the text. By default, the text value is set to CellBackground, which means the overridden text color will be the same as the cell's background color. Similarly to the default option, you can specify any valid RGB color or use the CellForeground or CellBackground options."},{"location":"configuration/colors/#hyperlink_decoration","title":"<code>hyperlink_decoration</code>","text":"<p>allows you to customize the colors used for hyperlink decoration when hovering over them. </p><pre><code>color_schemes:\n  default:\n    hyperlink_decoration:\n      normal: '#f0f000'\n      hover: '#ff0000'\n</code></pre> normal  defines the color to be used for hyperlink decoration in its normal state (not being hovered).  hover  determines the color to be applied to hyperlink decoration when it is being hovered over."},{"location":"configuration/colors/#vi_mode_highlight","title":"<code>vi_mode_highlight</code>","text":"<p>customize the colors used for highlighting in Vi mode. </p><pre><code>color_schemes:\n  default:\n    vi_mode_highlight:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#ffa500'\n      background_alpha: 0.5\n</code></pre> foreground  section specifies the color to be used for the foreground of the highlighted text.  foreground_alpha option determines the transparency level of the foreground color. It accepts a value between 0.0 (fully transparent) and 1.0 (fully opaque). This option allows you to control the visibility of the highlighted text.  background option in the vi_mode_highlight section defines the color to be used for the background of the highlighted text.  background_alpha option controls the transparency level of the background color. It accepts a value between 0.0 (fully transparent) and 1.0 (fully opaque)."},{"location":"configuration/colors/#vi_mode_cursorline","title":"<code>vi_mode_cursorline</code>","text":"<p>customize the colors used for the cursor line in Vi mode. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    vi_mode_cursorline:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#ffa500'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#selection","title":"<code>selection</code>","text":"<p>section customize the colors used for text selection. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    selection:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#4040f0'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#search_highlight","title":"<code>search_highlight</code>","text":"<p>section customize the colors used for search highlight. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    search_highlight:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#4040f0'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#search_highlight_focused","title":"<code>search_highlight_focused</code>","text":"<p>section customize the colors used for focused search highlight. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    search_highlight_focused:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#4040f0'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#word_highlight_current","title":"<code>word_highlight_current</code>","text":"<p>Coloring for the word that is highlighted due to double-clicking it. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    word_highlight_current:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#4040f0'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#word_highlight_other","title":"<code>word_highlight_other</code>","text":"<p>Coloring for the word that is highlighted due to double-clicking another word that matches this word. Options similar to <code>vi_mode_highlight</code>. </p><pre><code>color_schemes:\n  default:\n    word_highlight_other:\n      foreground: CellForeground\n      foreground_alpha: 1.0\n      background: '#4040f0'\n      background_alpha: 0.5\n</code></pre>"},{"location":"configuration/colors/#indicator_statusline","title":"<code>indicator_statusline</code>","text":"<p>Defines the colors to be used for the Indicator status line. Configuration entry consist of following sections, namely <code>default</code>, <code>inactive</code>, <code>insert_mode</code>, <code>normal_mode</code>, <code>visual_mode</code>. Each section have <code>foreground</code> and <code>background</code> options. You can specify only the sections you want to customize after configuring the <code>default</code> section. Minimal configuration looks like this: </p><pre><code>color_schemes:\n  default:\n    indicator_statusline:\n        default:\n          foreground: '#808080'\n          background: '#000000'\n</code></pre>"},{"location":"configuration/colors/#palette-presets","title":"Palette Presets","text":"<p>When choosing a palette from a preset as the color scheme  (in <code>profiles</code>) it is possible to tweak any configuration: </p><pre><code>color_schemes:\n  one-light:\n      word_highlight_other:\n          foreground: CellForeground\n          background: CellBackground\n          foreground_alpha: 1.0\n          background_alpha: 1.0\n</code></pre> <p>Complete configuration looks like this: </p><pre><code>color_schemes:\n  default:\n    indicator_statusline:\n        default:\n          foreground: '#FFFFFF'\n          background: '#0270C0'\n        inactive:\n          foreground: '#FFFFFF'\n          background: '#0270C0'\n        insert_mode:\n          foreground: '#FFFFFF'\n          background: '#0270C0'\n        normal_mode:\n          foreground: '#0F0002'\n          background: '#0270C0'\n        visual_mode:\n          foreground: '#FFFFFF'\n          background: '#0270C0'\n</code></pre>"},{"location":"configuration/colors/#normal","title":"<code>normal</code>","text":"<p>Normal colors </p><pre><code>color_schemes:\n  default:\n    normal:\n      black:   '#000000'\n      red:     '#c63939'\n      green:   '#00a000'\n      yellow:  '#a0a000'\n      blue:    '#4d79ff'\n      magenta: '#ff66ff'\n      cyan:    '#00a0a0'\n      white:   '#c0c0c0'\n</code></pre>"},{"location":"configuration/colors/#bright","title":"<code>bright</code>","text":"<p>Bright colors </p><pre><code>color_schemes:\n  default:\n    normal:\n      black:   '#707070'\n      red:     '#ff0000'\n      green:   '#00ff00'\n      yellow:  '#ffff00'\n      blue:    '#0000ff'\n      magenta: '#ff00ff'\n      cyan:    '#00ffff'\n      white:   '#ffffff'\n</code></pre>"},{"location":"configuration/colors/#default-color-scheme","title":"Default color scheme","text":"<pre><code>color_schemes:\n    default:\n        default:\n            background: '#1a1716'\n            foreground: '#d0d0d0'\n        background_image:\n            opacity: 0.5\n            blur: false\n        cursor:\n            default: CellForeground\n            text: CellBackground\n        hyperlink_decoration:\n            normal: '#f0f000'\n            hover: '#ff0000'\n        vi_mode_highlight:\n            foreground: CellForeground\n            foreground_alpha: 1.0\n            background: '#ffa500'\n            background_alpha: 0.5\n        vi_mode_cursorline:\n            foreground: '#ffffff'\n            foreground_alpha: 0.2\n            background: '#808080'\n            background_alpha: 0.4\n        selection:\n            foreground: CellForeground\n            foreground_alpha: 1.0\n            background: '#4040f0'\n            background_alpha: 0.5\n        search_highlight:\n            foreground: CellBackground\n            background: CellForeground\n            foreground_alpha: 1.0\n            background_alpha: 1.0\n        search_highlight_focused:\n            foreground: CellBackground\n            background: CellForeground\n            foreground_alpha: 1.0\n            background_alpha: 1.0\n        word_highlight_current:\n            foreground: CellForeground\n            background: '#909090'\n            foreground_alpha: 1.0\n            background_alpha: 0.5\n        word_highlight_other:\n            foreground: CellForeground\n            background: '#909090'\n            foreground_alpha: 1.0\n            background_alpha: 0.5\n        indicator_statusline:\n            default:\n              foreground: '#FFFFFF'\n              background: '#0270C0'\n            inactive:\n              foreground: '#FFFFFF'\n              background: '#0270C0'\n            insert_mode:\n              foreground: '#FFFFFF'\n              background: '#0270C0'\n            normal_mode:\n              foreground: '#FFFFFF'\n              background: '#0270C0'\n            visual_mode:\n              foreground: '#FFFFFF'\n              background: '#0270C0'\n        input_method_editor:\n            foreground: '#FFFFFF'\n            background: '#FF0000'\n        normal:\n            black:   '#000000'\n            red:     '#c63939'\n            green:   '#00a000'\n            yellow:  '#a0a000'\n            blue:    '#4d79ff'\n            magenta: '#ff66ff'\n            cyan:    '#00a0a0'\n            white:   '#c0c0c0'\n        bright:\n            black:   '#707070'\n            red:     '#ff0000'\n            green:   '#00ff00'\n            yellow:  '#ffff00'\n            blue:    '#0000ff'\n            magenta: '#ff00ff'\n            cyan:    '#00ffff'\n            white:   '#ffffff'\n</code></pre>"},{"location":"configuration/indicator-statusline/","title":"Indicator Statusline","text":""},{"location":"configuration/indicator-statusline/#indicator-statusline","title":"Indicator Statusline","text":"<p>The indicator statusline used to be a feature, from the old DEC VT level 4 terminals. Contour revives this feature to prominently show the terminal status.</p>"},{"location":"configuration/indicator-statusline/#configuration","title":"Configuration","text":"<pre><code>profiles:\n    your_profile:\n        status_line:\n            indicator:\n                left: \"{VTType} \u2502 {InputMode:Bold,Color=#C0C030}{SearchPrompt:Left= \u2502 }{TraceMode:Bold,Color=#FFFF00,Left= \u2502 }{ProtectedMode:Bold,Left= \u2502 }\"\n                middle: \"{Tabs}{Title:Left= \u00ab ,Right= \u00bb ,Color=#20c0c0}\"\n                right: \"{HistoryLineCount:Faint,Color=#c0c0c0} \u2502 {Clock:Bold} \"\n</code></pre> <p>Each segment, <code>left</code>, <code>middle</code>, and <code>right</code> may contain text to be displayed in the left, middle, or right segment of the indicator statusline.</p> <p>This text may contain placeholders to be replaced by their respective dynamic content.</p>"},{"location":"configuration/indicator-statusline/#variables","title":"Variables","text":"Variable Description <code>{Clock}</code> current clock in HH:MM format <code>{Command}</code> yields the result of the given command prompt, as specified via parameter <code>Program=...</code> <code>{HistoryLineCount}</code> number of lines in history (only available in primary screen) <code>{Hyperlink}</code> reveals the hyperlink at the given mouse location <code>{InputMode}</code> current input mode (e.g. INSERT, NORMAL, VISUAL) <code>{ProtectedMode}</code> indicates protected mode, if currently enabled <code>{SearchMode}</code> indicates search highlight mode, if currently active <code>{SearchPrompt}</code> search input prompt, if currently active <code>{Tabs}</code> indicates active tabs <code>{Text}</code> given text (makes only sense when customized with flags) <code>{Title}</code> current window title <code>{VTType}</code> currently active VT emulation type"},{"location":"configuration/indicator-statusline/#formatting-styles","title":"Formatting Styles","text":"<p>Each Variable, as specified above, can be parametrized for customizing the look of it. The common syntax to these variables and their parameters looks as follows:</p> <pre><code>{VariableName:SomeFlag,SomeKey=SomeValue}\n</code></pre> <p>So parameters can be specified after a colon (<code>:</code>) as a comma separated list of flags and key/value pairs. A key/value pair is further split by equal sign (<code>=</code>).</p> <p>The following list of formatting styles are supported:</p> Parameter Description <code>Left=TEXT</code> text to show on the left side, if the variable is to be shown <code>Right=TEXT</code> text to show on the right side, if the variable is to be shown <code>Color=#RRGGBB</code> text color in hexadecimal RGB notation <code>BackgroundColor=#RRGGBB</code> background color in hexadecimal RGB notation <code>Bold</code> text in bold font face <code>Italic</code> text in italic font face <code>Underline</code> underline text (only one underline style can be active) <code>CurlyUnderline</code> curly underline text (only one underline style can be active) <code>DoubleUnderline</code> double underline text (only one underline style can be active) <code>DottedUnderline</code> dotted underline text (only one underline style can be active) <code>DashedUnderline</code> dashed underline text (only one underline style can be active) <code>Blinking</code> blinking text <code>RapidBlinking</code> rapid blinking text <code>Overline</code> overline text <code>Inverse</code> inversed text/background coloring <p>These parameters apply to all variables above.</p> <p>The <code>Command</code> variable is the only one that requires a special attribute, <code>Program</code> whose value is the command to execute.</p>"},{"location":"configuration/indicator-statusline/#tabs-formatting-extensions","title":"Tabs formatting extensions","text":"<p>The <code>Tabs</code> key allows additional styling through the following attributes:</p> Parameter Description <code>ActiveColor</code> color of the active tab <code>ActiveBackground</code> background color of the active tab"},{"location":"configuration/key-mapping/","title":"Key Mapping","text":""},{"location":"configuration/key-mapping/#key-mapping","title":"Key Mapping","text":"<p>To customize key mappings, you need to configure <code>input_mapping</code> yaml entry Each element in the <code>input_mapping</code> represents one key binding, whereas <code>mods</code> represents an array of keyboard modifiers that must be pressed - as well as the <code>key</code> or <code>mouse</code> - in order to activate the corresponding action.  Additionally one can filter input mappings based on special terminal modes using the <code>modes</code> option:</p> <ul> <li>Alt       : The terminal is currently in alternate screen buffer, otherwise it is in primary screen buffer.</li> <li>AppCursor : The application key cursor mode is enabled (otherwise it's normal cursor mode).</li> <li>AppKeypad : The application keypad mode is enabled (otherwise it's the numeric keypad mode).</li> <li>Select    : The terminal has currently an active grid cell selection (such as selected text).</li> <li>Insert    : The Insert input mode is active, that is the default and one way to test that the input mode is not in normal mode or any of the visual select modes.</li> <li>Search    : There is a search term currently being edited or already present.</li> <li>Trace     : The terminal is currently in trace-mode, i.e., each VT sequence can be interactively single-step executed using custom actions. See TraceEnter/TraceStep/TraceLeave actions.</li> </ul> <p>You can combine these modes by concatenating them via <code>|</code> and negate a single one by prefixing with <code>~</code>. The <code>modes</code> option defaults to not filter at all (the input mappings always match based on modifier and key press/mouse event). <code>key</code> represents keys on your keyboard, and <code>mouse</code> represents buttons as well as the scroll wheel.</p> <p>Modifiers:</p> <ul> <li>Alt</li> <li>Control</li> <li>Shift</li> <li>Meta (this is the Windows key on Windows OS, and the Command key on macOS, and Meta on anything else)Keys can be expressed case-insensitively symbolic.</li> </ul> <p>Keys can be expressed case-insensitively symbolic:</p> <p><code>APOSTROPHE, ADD, BACKSLASH, COMMA, DECIMAL, DIVIDE, EQUAL, LEFT_BRACKET,    MINUS, MULTIPLY, PERIOD, RIGHT_BRACKET, SEMICOLON, SLASH, SUBTRACT, SPACE    Enter, Backspace, Tab, Escape, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,    DownArrow, LeftArrow, RightArrow, UpArrow, Insert, Delete, Home, End, PageUp, PageDown,    Numpad_Divide, Numpad_Multiply, Numpad_Subtract, Numpad_Add, Numpad_Decimal, Numpad_Enter, Numpad_Equal,    Numpad_0, Numpad_1, Numpad_2, Numpad_3, Numpad_4,    Numpad_5, Numpad_6, Numpad_7, Numpad_8, Numpad_9</code></p> <p>or in case of standard characters, just the character.</p> <p>Mouse buttons can be one of the following self-explanatory ones:</p> <p><code>Left, Middle, Right, WheelUp, WheelDown</code></p> <p>List of supported actions for key mappings.</p> Action Description <code>CancelSelection</code> Cancels currently active selection, if any. <code>ChangeProfile</code> Changes the profile to the given profile <code>name</code>. <code>ClearHistoryAndReset</code> Clears the history, performs a terminal hard reset and attempts to force a redraw of the currently running application. <code>CopyPreviousMarkRange</code> Copies the most recent range that is delimited by vertical line marks into clipboard. <code>CopySelection</code> Copies the current selection into the clipboard buffer. <code>CreateDebugDump</code> Create dump for debug purposes <code>CreateSelection, delimiters: ''</code> Creates selection with custom delimiters configured via <code>delimiters</code> member. <code>DecreaseFontSize</code> Decreases the font size by 1 pixel. <code>DecreaseOpacity</code> Decreases the default-background opacity by 5%. <code>FocusNextSearchMatch</code> Focuses the next search match (if any). <code>FocusPreviousSearchMatch</code> Focuses the next previous match (if any). <code>FollowHyperlink</code> Follows the hyperlink that is exposed via OSC 8 under the current cursor position. <code>IncreaseFontSize</code> Increases the font size by 1 pixel. <code>IncreaseOpacity</code> Increases the default-background opacity by 5%. <code>NewTerminal</code> Spawns a new terminal at the current terminals current working directory. <code>NoSearchHighlight</code> Disables current search highlighting, if anything is still highlighted due to a prior search. <code>OpenConfiguration</code> Opens the configuration file. <code>OpenFileManager</code> Opens the current working directory in a system file manager. <code>OpenSelection</code> Open the current terminal selection with the default system application (eg; xdg-open) <code>PasteClipboard</code> Pastes clipboard to standard input. Pass boolean parameter 'strip' to indicate whether or not to strip repetitive whitespaces down to one and newlines to whitespaces. <code>PasteSelection</code> Pastes current selection to standard input.Option <code>evaluate_in_shell</code> specify if pasted text must be appended with linefeed and used as an input for the running shell <code>Quit</code> Quits the application. <code>ReloadConfig</code> Forces a configuration reload. <code>ResetConfig</code> Overwrites current configuration with builtin default configuration and loads it. Attention, all your current configuration will be lost due to overwrite! <code>ResetFontSize</code> Resets font size to what is configured in the config file. <code>ScreenshotVT</code> Takes a screenshot in form of VT escape sequences. <code>SaveScreenshot</code> Takes a screenshot and saves it into a file. <code>CopyScreenshot</code> takes a screenshot and puts it into the system clipboard <code>ScrollDown</code> Scrolls down by the multiplier factor. <code>ScrollMarkDown</code> Scrolls one mark down (if none present, bottom of the screen) <code>ScrollMarkUp</code> Scrolls one mark up <code>ScrollOneDown</code> Scrolls down by exactly one line. <code>ScrollOneUp</code> Scrolls up by exactly one line. <code>ScrollPageDown</code> Scrolls a page down. <code>ScrollPageUp</code> Scrolls a page up. <code>ScrollToBottom</code> Scrolls to the bottom of the screen buffer. <code>ScrollToTop</code> Scrolls to the top of the screen buffer. <code>ScrollUp</code> Scrolls up by the multiplier factor. <code>SearchReverse</code> Initiates search mode (starting to search at current cursor position, moving upwards). <code>SendChars</code> Writes given characters in <code>chars</code> member to the applications input. <code>ToggleAllKeyMaps</code> Disables/enables responding to all keybinds (this keybind will be preserved when disabling all others). <code>ToggleFullscreen</code> Enables/disables full screen mode. <code>ToggleInputProtection</code> Enables/disables terminal input protection. <code>ToggleStatusLine</code> Shows/hides the VT320 compatible Indicator status line. <code>ToggleTitleBar</code> Shows/Hides titlebar <code>TraceBreakAtEmptyQueue</code> Executes any pending VT sequence from the VT sequence buffer in trace mode, then waits. <code>TraceEnter</code> Enables trace mode, suspending execution until explicitly requested to continue (See TraceLeave and TraceStep). <code>TraceLeave</code> Disables trace mode. Any pending VT sequence will be flushed out and normal execution will be resumed. <code>TraceStep</code> Executes a single VT sequence that is to be executed next. <code>ViNormalMode</code> Enters/Leaves Vi-like normal mode. The cursor can then be moved via h/j/k/l movements in normal mode and text can be selected via <code>v</code>, yanked via <code>y</code>, and clipboard pasted via <code>p</code>. <code>WriteScreen, chars: ''</code> Writes VT sequence in <code>chars</code> member to the screen (bypassing the application). <code>CreateNewTab</code> Creates a new tab in the terminal emulator. <code>CloseTab</code> Closes current tab. <code>MoveTabTo, position: 0</code> Moves current tab to the given position (starting at number 1). <code>MoveTabToLeft</code> Moves current tab to the left. <code>MoveTabToRight</code> Moves current tab to the right. <code>SwitchToTab, position: 0</code> Switch to absolute tab position (starting at number 1) <code>SwitchToPreviousTab</code> Switch to the previously focused tab <code>SwitchToTabLeft</code> Switch to tab to the left <code>SwitchToTabRight</code> Switch to tab to the right <code>SetTabName</code> Set the name of the current tab <p>Example of entries inside config file </p><pre><code> - { mods: [Control], key: Enter, action: CancelSelection }\n - { mods: [Control], key: Enter, action: ChangeProfile }\n - { mods: [Control], key: Enter, action: ClearHistoryAndReset }\n - { mods: [Control], key: Enter, action: CopyPreviousMarkRange }\n - { mods: [Control], key: Enter, action: CopySelection }\n - { mods: [Control], key: Enter, action: CreateDebugDump }\n - { mods: [Control], key: Enter, action: CreateSelection, delimiters: '' }\n - { mods: [Control], key: Enter, action: DecreaseFontSize }\n - { mods: [Control], key: Enter, action: DecreaseOpacity }\n - { mods: [Control], key: Enter, action: FocusNextSearchMatch }\n - { mods: [Control], key: Enter, action: FocusPreviousSearchMatch }\n - { mods: [Control], key: Enter, action: FollowHyperlink }\n - { mods: [Control], key: Enter, action: IncreaseFontSize }\n - { mods: [Control], key: Enter, action: IncreaseOpacity }\n - { mods: [Control], key: Enter, action: NewTerminal }\n - { mods: [Control], key: Enter, action: NoSearchHighlight }\n - { mods: [Control], key: Enter, action: OpenConfiguration }\n - { mods: [Control], key: Enter, action: OpenFileManager }\n - { mods: [Control], key: Enter, action: OpenSelection }\n - { mods: [Control], key: Enter, action: PasteClipboard }\n - { mods: [Control], key: Enter, action: PasteSelection }\n - { mods: [Control], key: Enter, action: Quit }\n - { mods: [Control], key: Enter, action: ReloadConfig }\n - { mods: [Control], key: Enter, action: ResetConfig }\n - { mods: [Control], key: Enter, action: ResetFontSize }\n - { mods: [Control], key: Enter, action: ScreenshotVT }\n - { mods: [Control], key: Enter, action: SaveScreenshot }\n - { mods: [Control], key: Enter, action: CopyScreenshot }\n - { mods: [Control], key: Enter, action: ScrollDown }\n - { mods: [Control], key: Enter, action: ScrollMarkDown }\n - { mods: [Control], key: Enter, action: ScrollMarkUp }\n - { mods: [Control], key: Enter, action: ScrollOneDown }\n - { mods: [Control], key: Enter, action: ScrollOneUp }\n - { mods: [Control], key: Enter, action: ScrollPageDown }\n - { mods: [Control], key: Enter, action: ScrollPageUp }\n - { mods: [Control], key: Enter, action: ScrollToBottom }\n - { mods: [Control], key: Enter, action: ScrollToTop }\n - { mods: [Control], key: Enter, action: ScrollUp }\n - { mods: [Control], key: Enter, action: SearchReverse }\n - { mods: [Control], key: Enter, action: SendChars }\n - { mods: [Control], key: Enter, action: ToggleAllKeyMaps }\n - { mods: [Control], key: Enter, action: ToggleFullscreen }\n - { mods: [Control], key: Enter, action: ToggleInputProtection }\n - { mods: [Control], key: Enter, action: ToggleStatusLine }\n - { mods: [Control], key: Enter, action: ToggleTitleBar }\n - { mods: [Control], key: Enter, action: TraceBreakAtEmptyQueue }\n - { mods: [Control], key: Enter, action: TraceEnter }\n - { mods: [Control], key: Enter, action: TraceLeave }\n - { mods: [Control], key: Enter, action: TraceStep }\n - { mods: [Control], key: Enter, action: ViNormalMode }\n - { mods: [Control], key: Enter, action: WriteScreen, chars: '' }\n - { mods: [Control], key: Enter, action: CreateNewTab }\n - { mods: [Control], key: Enter, action: CloseTab }\n - { mods: [Control], key: Enter, action: MoveTabTo, position: 0 }\n - { mods: [Control], key: Enter, action: MoveTabToLeft }\n - { mods: [Control], key: Enter, action: MoveTabToRight }\n - { mods: [Control], key: Enter, action: SwitchToTab, position: 0 }\n - { mods: [Control], key: Enter, action: SwitchToPreviousTab }\n - { mods: [Control], key: Enter, action: SwitchToTabLeft }\n - { mods: [Control], key: Enter, action: SwitchToTabRight }\n - { mods: [Control], key: Enter, action: SetTabName }\n</code></pre>"},{"location":"configuration/profiles/","title":"Profiles","text":"<p>All profiles inside configuration files share parent node <code>profiles</code>. To create profile you need to specify child node </p><pre><code>profiles:\n    main:\n    #default configuration\n    profile_for_windows:\n    # windows specific entries\n    profile_for_macos:\n    # macos specific entries\n</code></pre>"},{"location":"configuration/profiles/#profile-configuration","title":"Profile configuration","text":""},{"location":"configuration/profiles/#shell","title":"<code>shell</code>","text":"<p>configuration section allows you to specify the process to be started inside the terminal. It provides flexibility to override the default login shell and supports logging in to a remote host. </p><pre><code>profiles:\n  profile_name:\n    shell: \"/bin/bash\"\n    arguments: [\"some\", \"optional\", \"arguments\", \"for\", \"the\", \"shell\"]\n</code></pre> arguments (optional) Allows you to provide additional command-line arguments to the shell executable. These arguments will be passed to the shell when it is started inside the terminal."},{"location":"configuration/profiles/#ssh","title":"<code>ssh</code>","text":"<p>With this key, you can bypass local PTY and process execution and directly connect via TCP/IP to a remote SSH server.</p> <pre><code>profiles:\n  profile_name:\n    ssh:\n      host: remote-server.example.com\n      port: 22\n      user: \"CustomUserName\"\n      private_key: \"path/to/key\"\n      public_key: \"path/to/key.pub\"\n      known_hosts: \"~/.ssh/known_hosts\"\n      forward_agent: false\n</code></pre> <p>Note, only <code>host</code> option is required. Everything else is defaulted. Keep in mind, that the user's <code>~/.ssh/config</code> will be parsed with respect to the supported options above. These values can be overridden in the local Contour configuration as follows:</p> <p> ssh.host SSH server to establish the connection to.  ssh.port SSH port (defaults to <code>22</code>). Only specify this value if it is deviating from the default value <code>22</code>.  ssh.private_key Path to private key to use for key based authentication.  ssh.public_key Path to public key that belongs to the private key. When using key based authentication, it depends on the underlying backend, if the public key is also required. OpenSSL for example does not require it.  ssh.known_hosts Path to <code>known_hosts</code> file. This defaults to and usually is located in <code>~/.ssh/known_hosts</code>.  ssh.forward_agent Boolean, indicating wether or not the local SSH auth agent should be requested to be forwarded. Note: this is currently not working due to an issue related to the underlying library being used, but is hopefully resolved soon.</p> <p>Note, custom environment variables may be passed as well, when connecting to an SSH server using this builtin-feature. Mind, that the SSH server is not required to accept all environment variables.</p> <p>If an OpenSSH server is used, have a look at the <code>AcceptEnv</code> configuration setting in the <code>sshd_config</code> configuration file on the remote SSH server, to configure what environment variables are permitted to be sent.</p>"},{"location":"configuration/profiles/#escape_sandbox","title":"<code>escape_sandbox</code>","text":"<p>option in the configuration file allows you to control the sandboxing behavior when the terminal is executed from within Flatpak. This configuration is relevant only if the terminal is running in a Flatpak environment. </p><pre><code>profiles:\n  profile_name:\n    escape_sandbox: true\n</code></pre>"},{"location":"configuration/profiles/#copy_last_mark_range_offset","title":"<code>copy_last_mark_range_offset</code>","text":"<p>configuration option is an advanced setting that is useful when using the CopyPreviousMarkRange feature with multiline prompts. It allows you to specify an offset value that is added to the current cursor's line number minus 1 (i.e., the line above the current cursor). </p><pre><code>profiles:\n  profile_name:\n    copy_last_mark_range_offset: 0\n</code></pre>"},{"location":"configuration/profiles/#show_title_bar","title":"<code>show_title_bar</code>","text":"<p>configuration option determines whether or not the title bar will be shown when the terminal profile is activated. </p><pre><code>profiles:\n  profile_name:\n    show_title_bar: true\n</code></pre>"},{"location":"configuration/profiles/#size_indicator_on_resize","title":"<code>size_indicator_on_resize</code>","text":"<p>configuration option determines whether or not the size indicator will be shown when terminal will resized. </p><pre><code>profiles:\n  profile_name:\n    size_indicator_on_resize: true\n</code></pre>"},{"location":"configuration/profiles/#fullscreen","title":"<code>fullscreen</code>","text":"<p>configuration option determines whether the terminal's screen should be put into fullscreen mode when the terminal profile is activated. Fullscreen mode expands the terminal window to occupy the entire screen, providing a distraction-free environment for your terminal sessions. </p><pre><code>profiles:\n  profile_name:\n    fullscreen: false\n</code></pre>"},{"location":"configuration/profiles/#maximized","title":"<code>maximized</code>","text":"<p>configuration option determines whether the terminal window should be maximized when the specified profile is activated. Maximizing a window expands it to fill the entire available space on the screen, excluding the taskbar or other system elements.</p>"},{"location":"configuration/profiles/#search_mode_switch","title":"<code>search_mode_switch</code>","text":"<p>The configuration option determines whether the editor should automatically switch from search mode back to insert mode upon exiting a search. If enabled, the terminal will return to insert mode, allowing for immediate text input. If disabled, the terminal will remain in normal mode. </p><pre><code>profiles:\n  profile_name:\n    search_mode_switch: true\n</code></pre>"},{"location":"configuration/profiles/#insert_after_yank","title":"<code>insert_after_yank</code>","text":"<p>This configuration option determines whether the terminal should automatically switch from normal mode to insert mode after executing a yank command. When enabled, the terminal will enter insert mode, allowing for immediate text input. If disabled, the terminal will remain in normal mode, maintaining command functionality. </p><pre><code>profiles:\n  profile_name:\n    insert_after_yank: false\n</code></pre>"},{"location":"configuration/profiles/#bell","title":"<code>bell</code>","text":"<p>Configuration section permits tuning the behavior of the terminal bell.</p> <p></p><pre><code>profiles:\n  profile_name:\n    bell:\n      sound: \"default\"\n      alert: false\n</code></pre> sound This option determines the sound of <code>BEL</code> (also <code>\u0007</code> or <code>0x07</code>) to <code>off</code> or <code>default</code> or sound generated by a file located at <code>path</code>.  alert This option determines whether or not a window alert will be raised each time a bell is ringed. Useful for tiling window managers like i3 or sway."},{"location":"configuration/profiles/#terminal_id","title":"<code>terminal_id</code>","text":"<p>configuration option allows you to specify the terminal type that will be advertised by the terminal emulator. The terminal type indicates the set of capabilities and features that the terminal supports, enabling compatibility with different applications and systems.</p> <pre><code>profiles:\n  profile_name:\n    terminal_id: VT525\n</code></pre>"},{"location":"configuration/profiles/#frozen_modes","title":"<code>frozen_modes</code>","text":"<p>fmt formatted doc 0</p>"},{"location":"configuration/profiles/#smooth_line_scrolling","title":"<code>smooth_line_scrolling</code>","text":"<p>Defines the number of milliseconds to wait before actually executing the LF (linefeed) control code in case DEC mode <code>DECSCLM</code> is enabled. </p><pre><code>profiles:\n  profile_name:\n    slow_scrolling_time: 0\n</code></pre>"},{"location":"configuration/profiles/#terminal_size","title":"<code>terminal_size</code>","text":"<p>configuration option allows you to specify the initial size of the terminal window in terms of the number of columns and lines. </p><pre><code>profiles:\n  profile_name:\n    terminal_size:\n      columns: 80\n      lines: 25\n</code></pre> columns This option specifies the number of columns (characters) to be displayed in the terminal window. In the provided example, the value is set to 80.  lines This option specifies the number of lines to be displayed in the terminal window. In the provided example, the value is set to 25."},{"location":"configuration/profiles/#margins","title":"<code>margins</code>","text":"<p>Enforces a horizontal and vertical margin to respect on both sides of the terminal. This is particularily useful on operating systems (like MacOS) that draw the border frame into the main widgets space, or simply to create some artificial space to improve the user's focus.</p> <pre><code>profiles:\n  profile_name:\n    margins:\n      horizontal: 5\n      vertical: 0\n</code></pre>"},{"location":"configuration/profiles/#history","title":"<code>history</code>","text":"<p>configuration allows you to customize the behavior and settings related to the terminal's history, including the number of preserved lines, auto-scrolling, and scroll events. </p><pre><code>profiles:\n  profile_name:\n    history:\n      limit: 1000\n      auto_scroll_on_update: true\n      scroll_multiplier: 3\n</code></pre> limit This option specifies the number of lines to preserve in the terminal's history. A value of -1 indicates unlimited history, meaning that all lines are preserved. In the provided example, the limit is set to 1000.  auto_scroll_on_update This boolean option determines whether the terminal automatically scrolls down to the bottom when new content is added. If set to true, the terminal will scroll down on screen updates. If set to false, the terminal will maintain the current scroll position. In the provided example, auto_scroll_on_update is set to true.   scroll_multiplier This option defines the number of lines to scroll when the ScrollUp or ScrollDown events occur. By default, scrolling up or down moves three lines at a time. You can adjust this value as needed. In the provided example, scroll_multiplier is set to 3."},{"location":"configuration/profiles/#scrollbar","title":"<code>scrollbar</code>","text":"<p>configuration allows you to customize the appearance and behavior of the visual scrollbar in the terminal. </p><pre><code>profiles:\n  profile_name:\n    scrollbar:\n      position: Hidden\n      hide_in_alt_screen: true\n</code></pre> position  This option specifies the position of the scrollbar in the terminal window. It can be set to one of the following values: Left, Right, Hidden.  hide_in_alt_screen This boolean option determines whether the scrollbar should be hidden when the terminal is in the alternate screen mode. If set to true, the scrollbar will be hidden when the terminal switches to the alternate screen. If set to false, the scrollbar will remain visible even in the alternate screen mode."},{"location":"configuration/profiles/#mouse","title":"<code>mouse</code>","text":"<p>configuration allows you to control the behavior of the mouse in the terminal. </p><pre><code>profiles:\n  profile_name:\n    mouse:\n      hide_while_typing: true\n</code></pre> hide_while_typing This boolean option determines whether the mouse cursor should be hidden while typing in the terminal. When set to true, the mouse cursor will be hidden when you start typing. When set to false, the mouse cursor will remain visible while typing."},{"location":"configuration/profiles/#permissions","title":"<code>permissions</code>","text":"<p>configuration allows you to control the access permissions for specific VT sequences in the terminal. </p><pre><code>profiles:\n  profile_name:\n    permissions:\n      change_font: ask\n      capture_buffer: ask\n      display_host_writable_statusline: ask\n</code></pre> change_font This option determines the access permission for changing the font using the VT sequence <code>OSC 50 ; Pt ST</code>. The possible values are: allow, deny, ask.  capture_buffer This option determines the access permission for capturing the screen buffer using the VT sequence <code>CSI &gt; Pm ; Ps ; Pc ST</code>. The response can be read from stdin as the sequence <code>OSC 314 ; &lt;screen capture&gt; ST</code>. The possible values are: allow, deny, ask. display_host_writable_statusline This option determines the access permission for displaying the \"Host Writable Statusline\" programmatically using the VT sequence <code>DECSSDT 2</code>. The possible values are: allow, deny, ask."},{"location":"configuration/profiles/#highlight_double_clicked_word","title":"<code>highlight_double_clicked_word</code>","text":"<p>configuration option enables the highlighting of a word and its matches when double-clicked on the primary screen in the terminal. </p><pre><code>profiles:\n  profile_name:\n    highlight_word_and_matches_on_double_click: true\n</code></pre> change_font  When this option is enabled (true), the following behavior occurs:      - Double-clicking on a word in the primary screen will select and highlight the double-clicked word.      - Additionally, all other occurrences of the same word will also be highlighted without being selected.      - This feature is implemented by initiating a search for the double-clicked word.      - You can use the FocusNextSearchMatch and FocusPreviousSearchMatch actions to navigate to the next or previous occurrence of the same word, even if it is outside the current viewport."},{"location":"configuration/profiles/#fonts","title":"<code>fonts</code>","text":"<p>section of the configuration allows you to customize the font settings for the terminal. </p><pre><code>profiles:\n  profile_name:\n    font:\n      size: 12\n      dpi_scale: 1.0\n      locator: native\n      text_shaping:\n        engine: native\n      builtin_box_drawing: true\n      render_mode: gray\n      strict_spacing: true\n      regular:\n        family: \"monospace\"\n        weight: regular\n        slant: normal\n        features: []\n      emoji: \"emoji\"\n</code></pre> size Specifies the initial font size in pixels. The default value is 12.  dpi_scale Allows applying a DPI scaling factor on top of the system's configured DPI. The default value is 1.0.  locator  Determines the font locator engine to use for locating font files and font fallback. Possible values are <code>native</code> and <code>mock</code>. <code>native</code> will use the operating-system native font location service (e.g. CoreText on macOS and DirectWrite on Windows), whereas <code>mock</code> is solely used for testing the software (not recommended by end-users) text_shaping.engine Selects the text shaping and font rendering engine. Supported values are native, DirectWrite, CoreText, and OpenShaper.   builtin_box_drawing Specifies whether to use built-in textures for pixel-perfect box drawing. If disabled, the font's provided box drawing characters will be used. The default value is true. render_mode Specifies the font render mode, which tells the font rasterizer engine what rendering technique to use. Available modes are lcd, light, gray, and monochrome.   strict_spacing Indicates whether only monospace fonts should be included in the font and font fallback list. The default value is true.   regular Defines the regular font style with the following parameters:   regular.family  Specifies the font family name, such as \"monospace\", \"Courier New\", or \"Fira Code\".  regular.weight  Specifies the font weight, such as thin, extra_light, light, demilight, book, normal, medium, demibold, bold, extra_bold, black, or extra_black.  regular.slant  Specifies the font slant, which can be normal, italic, or oblique.  regular.features Sets optional font features to be enabled. This is usually a 4-letter code, such as ss01 or ss02. Refer to your font's documentation for supported features. By default, no features are enabled.  emoji Specifies the font to be used for displaying Unicode symbols with emoji presentation. The default value is \"emoji\"."},{"location":"configuration/profiles/#draw_bold_text_with_bright_colors","title":"<code>draw_bold_text_with_bright_colors</code>","text":"<p>Specifies whether bold text should be rendered in bright colors for indexed colors. If disabled, normal colors will be used for bold text. The default value is false. </p><pre><code>profiles:\n  profile_name:\n   draw_bold_text_with_bright_colors: false\n</code></pre>"},{"location":"configuration/profiles/#mode_insert","title":"<code>mode_insert</code>","text":"<p>section of the configuration allows you to customize the appearance and behavior of the terminal cursor. </p><pre><code>profiles:\n  profile_name:\n   cursor:\n    shape: \"bar\"\n    blinking: false\n    blinking_interval: 500\n</code></pre> shape Specifies the shape of the cursor. You can choose from the following options:  -block: A filled rectangle.  -rectangle: Just the outline of a block.  -underscore: A line under the text.  -bar: The well-known i-Beam cursor.  blinking Determines whether the cursor should blink over time. If set to true, the cursor will blink; if set to false, the cursor will remain static.  blinking_interval Specifies the blinking interval in milliseconds. This value defines how quickly the cursor alternates between being visible and invisible when blinking is enabled."},{"location":"configuration/profiles/#mode_normal","title":"<code>mode_normal</code>","text":"<p>section in the configuration allows you to customize the appearance and behavior of the cursor specifically in vi-like normal mode. </p><pre><code>profiles:\n  profile_name:\n    normal_mode:\n      cursor:\n        shape: block\n        blinking: false\n        blinking_interval: 500\n</code></pre>"},{"location":"configuration/profiles/#mode_visual","title":"<code>mode_visual</code>","text":"<p>section in the configuration allows you to customize the appearance and behavior of the cursor specifically in vi-like normal mode. </p><pre><code>profiles:\n  profile_name:\n    visual_mode:\n      cursor:\n        shape: block\n        blinking: false\n        blinking_interval: 500\n</code></pre>"},{"location":"configuration/profiles/#highlight_timeout","title":"<code>highlight_timeout</code>","text":"<p>option in the configuration determines the duration in milliseconds for which the yank highlight is shown in vi mode. After yanking (copying) text in vi mode, the yanked text is typically highlighted momentarily to provide visual feedback. This configuration option allows you to specify the duration of this highlight. </p><pre><code>profiles:\n  profile_name:\n    vi_mode_highlight_timeout: 300\n</code></pre>"},{"location":"configuration/profiles/#modal_cursor_scroll_off","title":"<code>modal_cursor_scroll_off</code>","text":"<p>option in the configuration sets the scrolloff value for cursor movements in normal and visual (block) modes. The scrolloff value determines the minimum number of lines to keep visible above and below the cursor when scrolling. In other words, it controls the amount of margin or padding around the cursor during scrolling operations. </p><pre><code>profiles:\n  profile_name:\n    vi_mode_scrolloff: 8\n</code></pre>"},{"location":"configuration/profiles/#status_line","title":"<code>status_line</code>","text":"<p>section in the configuration file allows you to customize the behavior and appearance of the status line in the terminal. </p><pre><code>profiles:\n  profile_name:\n    status_line:\n      display: none\n      position: bottom\n      sync_to_window_title: false\n</code></pre> display specifies whether the status line should be shown or not. The possible values are none (status line is not shown) and indicator (status line is shown). In the example, the status line is set to none, meaning it will not be displayed initially.  position determines the placement of the status line. It can be set to top or bottom. In the example, the status line is set to bottom, indicating that it will appear at the bottom of the terminal window if enabled.  sync_to_window_title controls whether the window title should be synchronized with the Host Writable status line. If the Host Writable status line is denied, enabling this option will update the window title accordingly. By default, this option is set to false."},{"location":"configuration/profiles/#background","title":"<code>background</code>","text":"<p>section in the configuration file allows you to customize the background settings for the terminal. </p><pre><code>profiles:\n  profile_name:\n    background:\n      opacity: 1.0\n      blur: false\n</code></pre> opacity specifies the background opacity to use. The value ranges from 0.0 to 1.0, where 0.0 represents fully transparent and 1.0 represents fully opaque. You can adjust this value to control the transparency level of the terminal's background.  blur determines whether the transparent background should be blurred on platforms that support it. Currently, only Windows 10 is supported for background blurring. By default, this option is set to false, meaning no background blurring will be applied."},{"location":"configuration/profiles/#colors","title":"<code>colors</code>","text":"<p>section in the configuration file allows you to specify the colorscheme to use for the terminal. You can use one of the predefined color palettes as a setting for colors entry. List of predefined colorschemes: <code>contour</code>(default colors), <code>monokai</code>, <code>one-light</code>, <code>one-dark</code>, <code>gruvbox-light</code>, <code>gruvbox-dark</code>, <code>solarized-light</code>, <code>solarized-dark</code>, <code>papercolor-light</code>, <code>papercolor-dark</code>.</p> <pre><code>profiles:\n  profile_name:\n    colors: \" default \"\n</code></pre> <p>To make the terminal's color scheme dependant on OS appearance (dark and light mode) settings, you need to specify two color schemes:</p> <pre><code>profiles:\n  profile_name:\n    colors:\n      dark: \"some_dark_scheme_name\"\n      light: \"some_light_scheme_name\"\n</code></pre> <p>With this, the terminal will use the color scheme as specified in <code>dark</code> when OS dark mode is on, and <code>light</code>'s color scheme otherwise.</p>"},{"location":"configuration/profiles/#hyperlink_decoration","title":"<code>hyperlink_decoration</code>","text":"<p>section in the configuration file allows you to configure the styling and colorization of hyperlinks when they are displayed in the terminal and when they are hovered over by the cursor.</p> <p>Possible values: underline, dotted-underline, double-underline, curly-underline, dashed-underline, overline, crossed-out, framed, encircle (if implemented)</p> <pre><code>profiles:\n  profile_name:\n    hyperlink_decoration:\n      normal: dotted\n      hover: underline\n</code></pre>"},{"location":"configuration/profiles/#wm_class","title":"<code>wm_class</code>","text":"<p>Configuration option defines the class part of the <code>WM_CLASS</code> property of the terminal window. The <code>WM_CLASS</code> property is a standard X11 property used to identify and classify windows by their class and instance.</p>"},{"location":"configuration/profiles/#option_key_as_alt","title":"<code>option_key_as_alt</code>","text":"<p>section tells Contour how to handle Option-Key events on MacOS. This value is ignored on other platforms. </p><pre><code>profiles:\n  profile_name:\n    option_as_alt: false\n</code></pre>"},{"location":"demo/font-ligatures/","title":"Font ligatures","text":""},{"location":"demo/font-ligatures/#font-ligatures","title":"Font Ligatures","text":"<p>Contour renders your font ligatures out of the box. If you font supports them, Contour will render them.</p> <p></p>"},{"location":"demo/git-branch-drawings/","title":"Git branch drawings","text":""},{"location":"demo/git-branch-drawings/#git-branch-drawings","title":"Git Branch Drawings","text":"<p>Contour implements rendering of git branch characters used by e.g. vim-flog and gitgraph.nvim. Initially introduced to kitty the symbol set was later expanded to support more commit options.</p> <p>The symbols use codepoints U+F5D0 ... U+F60D.</p> <p>Note</p> <p>U+F5D2 ... U+F5D5 are supposed to be fading out symbols but currently are rendered as simple lines.</p> <p> </p> <p>The symbols may be customized via config options: </p><pre><code># Controls how git branch drawings are rendered.\n# `branch_style` controls style of connecting branches. May be on of `none`,`thin`,`thick`,`double. The default value is `thin`.\n# `arc_style` controls style of arcs. May be one of `round`,`ellips`. `arc_style` has effect only if `branch_style` is `thin`. The default value is `round`.\n# `merge_commit_style` controls style of merge commits. May be one of `solid`,`bullet`. The default value is `bullet`.\n\ngit_drawings:\n    branch_style:       thin\n    arc_style:          round\n    merge_commit_style: bullet\n</code></pre>"},{"location":"demo/images/","title":"Images","text":""},{"location":"demo/images/#image-support","title":"Image Support","text":"<p>Contour implements first-class Sixel image support.</p> <p>Most notably supporting libraries, are notcurses and libsixel.</p> <p>Also, libsixel does provide a CLI to convert well known image formats (like PNG) to Sixel format and have them printed to the terminal.</p> <p> </p>"},{"location":"demo/ime/","title":"Input method editor (IME)","text":""},{"location":"demo/ime/#input-method-editor-ime","title":"Input method editor (IME)","text":"<p>An input method (or input method editor, commonly abbreviated IME) is an operating system component or program that enables users to generate characters not natively available on their input devices by using sequences of characters (or mouse operations) that are available to them. Using an input method is usually necessary for languages that have more graphemes than there are keys on the keyboard. More info can be found on wikipedia and with more info how to setup it and use here wiki.archlinux</p>"},{"location":"demo/ime/#example-of-emoji-input-in-contour-using-ibus","title":"Example of emoji input in contour using ibus","text":"<p>List of emoji from unicode</p> <p>You can insert any unicode character using ibus IME by pressing Ctrl+Shift+u (default) and then insert unicode code for the emoji or other character.</p> <p></p><p></p>"},{"location":"demo/ime/#example-of-input-using-pinyin-via-ibus","title":"Example of input using pinyin via ibus","text":""},{"location":"demo/input-modes/","title":"Input Modes","text":""},{"location":"demo/input-modes/#input-modes","title":"Input Modes","text":"<p>Just like with the power of Vi-like modes in some editors, Contour Terminal comes with so called vi-like modes to empower the advanced user with very fast access to the screen and its history.</p>"},{"location":"demo/input-modes/#select-yank-paste","title":"Select, Yank, Paste","text":"Your browser does not support the video tag.  <p>This little videos shows how to get into normal mode (Ctrl+Shift+Space) and move to the text that is to be yanked (<code>y</code>) into the clipboard. Mind, the clipboard is being pasted with newlines being stripped off (<code>&lt;Shift-p&gt;</code>).</p> <p>Note how the statusline at the bottom is reflecting the current input mode.</p> <p>For more information on what motions Contour supports, please refer to its documentation here.</p>"},{"location":"demo/line-marks/","title":"Line marks","text":""},{"location":"demo/line-marks/#line-marks","title":"Line Marks","text":"<p>Ever wanted to jump quickly to the top of the previous prompt? With a little bit of shell integration, you can make the shell tell the terminal which lines in your screen and scrollback buffer to remember.</p>"},{"location":"demo/line-marks/#setting-a-line-mark","title":"Setting a line mark","text":"<p>This is what a shell integration would do, but you can simply mark lines yourself by trivially writing to <code>stdout</code>, as follows:</p> <pre><code>printf \"\\033[&gt;M\"\n</code></pre> <p>This will tell the terminal to remember the line as a jump-target</p>"},{"location":"demo/line-marks/#jump-via-shortcut","title":"Jump via shortcut","text":"<p>Ensure you have a similar configuration set as follows to relatively jump up or down of your marked lines.</p> <pre><code>input_mapping:\n    - { mods: [Control, Alt], key: K, action: ScrollMarkUp,   mode: \"~Alt\" }\n    - { mods: [Control, Alt], key: J, action: ScrollMarkDown, mode: \"~Alt\" }\n</code></pre>"},{"location":"demo/line-marks/#jump-extension-to-vi-like-normal-mode","title":"Jump extension to Vi-like Normal Mode","text":"<p>Use <code>[m</code> and <code>]m</code> to jump the the next line mark up and down when being in normal input mode.</p> <p>Please see Input Modes for more information.</p>"},{"location":"demo/line-marks/#line-marks-as-text-objects","title":"Line marks as text objects","text":"<p>In Vi-like normal mode, you can span a text object in between two line marks, as follows:</p> <ul> <li><code>vim</code> - visual select within two line marks (excluding marked lines)</li> <li><code>vam</code> - visual select around two line marks (including marked line)</li> <li><code>yim</code> - yank within two line marks (excluding marked lines)</li> <li><code>yam</code> - yank around two line marks (including marked line)</li> </ul> <p>Please see Input Modes for more information.</p>"},{"location":"demo/size_indicator/","title":"Size indicator","text":""},{"location":"demo/size_indicator/#size-indicator","title":"Size indicator","text":"<p>On resize window with current terminal size will appear</p> <p></p><p></p>"},{"location":"demo/statusline/","title":"Status line","text":""},{"location":"demo/statusline/#statusline","title":"Statusline","text":"<p>The Statusline in Contour is an implementation of the DEC VT320 statusline feature. We aim to revive this feature as we see great use to it.</p>"},{"location":"demo/statusline/#indicator-statusline","title":"Indicator Statusline","text":"<p>This is the most obvious and probably most used one. It's the statusline as you may be used to it.</p> <p>Contour shows relevant contextual information on it, such as:</p> <ul> <li>the clock,</li> <li>current VT emulation mode,</li> <li>input mode</li> </ul> <p>and much more, depending on the context.</p> <p>This line can be actively toggled by the user via configuration, e.g. via:</p> <pre><code>input_mapping:\n    - { mods: [Control, Alt],   key: '.',           action: ToggleStatusLine }\n</code></pre>"},{"location":"demo/statusline/#host-programmable-statusline","title":"Host Programmable Statusline","text":"<p>This statusline can be alternatively displayed and can be written to and fully controlled like the main display.</p> <p>There are not many applications yet doing so, but there would be a great use to such a feature by any application that has fast output but a rarely updating status line, maybe even tmux or screen could make use of it to trivialize the common use-case.</p> <p>If you consider playing around with it, have a look at the VT sequences</p> <ul> <li><code>DECSASD</code> - Select Active Status Display</li> <li><code>DECSSDT</code> - Select Status Display (Line) Type</li> </ul>"},{"location":"internals/","title":"Contour Terminal Emulator - Internals","text":""},{"location":"internals/#contour-terminal-emulator-internals","title":"Contour Terminal Emulator - Internals","text":""},{"location":"internals/#repository-layout","title":"Repository Layout","text":"<pre><code>docs/             - Contour documentation and website\ncmake/            - CMake helper modules\nscripts/          - general development assisting and CI helper scripts\nsrc/              - Contour source code\n  contour/        - GUI terminal emulator application (business logic)\n  crispy/         - fundamentals library\n  text_shaper/    - font location and text shaping &amp; rasterization library\n  vtbackend/      - core terminal library\n  vtparser/       - VT parser library\n  vtpty/          - PTY library\n  vtrasterizer/   - frontend independent Terminal rendering library\ntest/             - Contains a set of test scripts.\n</code></pre>"},{"location":"internals/#crispy-library","title":"<code>crispy</code> library","text":"<p>This library contains super generic helper functions that are too small to be their own library and ease general development.</p>"},{"location":"internals/#text_shaper-library","title":"<code>text_shaper</code> library","text":"<p>This library abstracts font location service, text shaping, as well as glyph rasterization into a platform independent API.</p>"},{"location":"internals/#vtpty-library","title":"<code>vtpty</code> library","text":"<p><code>vtpty</code> provides an abstract API to construct a PTY handle to communicate between a terminal emulator (master) and a connected application (slave).</p>"},{"location":"internals/#vtparser-library","title":"<code>vtparser</code> library","text":"<p><code>vtparser</code> library provides an API to parse VT sequences. This library can be used on the master side (terminal emulator) as well as slave side (terminal application, e.g. the shell).</p>"},{"location":"internals/#vtbackend-library","title":"<code>vtbackend</code> library","text":"<p>Here we implement the actual terminal emulation. This is a headless library and cannot just be used for a GUI terminal emulator software. In order to render the screen state of a terminal to pixels, the <code>vtrasterizer</code> library can be used.</p>"},{"location":"internals/#vtrasterizer-library","title":"<code>vtrasterizer</code> library","text":"<p><code>vtrasterizer</code> implements rasterizing the screen state into a bitmap. This is done target independent, which means, that the caller must provide the respective implementation to decide how the pixels are being stored (or rendered).</p>"},{"location":"internals/#process-threading-model","title":"Process Threading Model","text":"<p>Contour Terminal Emulator is multithreaded. The main thread is solely for receiving user input events and displaying screen updates plus some necessary administrative tasks.</p> <p>The slave application will be spawned as a process and a thread is being associated with it to exclusively read the application's output, which will be processed inside the same thread. That thread is responsible for updating the internal terminal state.</p>"},{"location":"internals/#how-terminal-input-is-being-processed","title":"How terminal input is being processed","text":"<p>The user can send keyboard and mouse input which the connected slave (application) will read from its <code>stdin</code>.</p> <ol> <li>The native OS will emit an event, which will be intercepted by GLFW3 (the OpenGL Framework)</li> <li>The target GUI input events are being mapped to <code>terminal</code> API input events (see <code>InputGenerator</code>)</li> <li>The <code>terminal::InputEvent</code> objects are send to the respective <code>terminal_view::TerminalView</code>, which will apply key binds, if applicable, or pass the events to <code>terminal::Terminal</code>.</li> <li>The <code>terminal::Terminal</code> instance will use <code>terminal::InputGenerator</code> to generate VT sequences depending on current mode flags.</li> <li>The generated VT sequences are being transmitted to the slave application.</li> </ol>"},{"location":"internals/#how-terminal-output-is-being-processed","title":"How terminal output is being processed","text":"<p>The connected slave (application) may write a stream of characters to <code>stdout</code> or <code>stderr</code>, which will be read by the terminal.</p> <ol> <li>The VT stream is being parsed by a VT <code>Parser</code> that emits raw events</li> <li>These events are taken by the <code>OutputHandler</code>, and translated to <code>Command</code> variant types - in case of a VT function (such as ESC, CSI, OSC) a unique ID is being constructed. This unique ID is then mapped to a <code>FunctionDef</code> with a <code>FunctionHandler</code> whereas the latter will perform semantic analysis in order to emit the higher level <code>Command</code> variant types.</li> <li>The <code>Command</code> variant types are then processed in order by the <code>Screen</code> instance, that ultimatively interprets them.</li> <li>A callback hooks is being invoked to notify about screen updates (useful for displaying updated screen contents).</li> </ol>"},{"location":"internals/CODING_STYLE/","title":"Coding Style Guidelines","text":""},{"location":"internals/CODING_STYLE/#coding-style-guidelines","title":"Coding Style Guidelines","text":"<ul> <li>Prefer CppCoreGuidelines if possible.</li> <li>Avoid <code>friend</code> keyword.</li> <li>Use signed integers unless the integer is holding a bit pattern.</li> <li>Use the smallest integer type that is required to hold all desired values.</li> <li>Do not cast from signed to unsigned unless you want the bit pattern, prefer to cast from unsigned   to signed instead.</li> </ul>"},{"location":"internals/CODING_STYLE/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>namespaces: <code>snake_case</code></li> <li>types: UpperCamelCase</li> <li>temporary variable: lowerCamelCase</li> <li>private member variables: lowerCamelCase with trailing underscore</li> <li>public member variable: lowerCamelCase</li> <li>constexpr variable: UpperCamelCase</li> <li>function names: lowerCamelCase</li> <li>function parameters: lowerCamelCase with leading underscore</li> <li>Template parameter name: UpperCamelCase</li> <li>preprocessor definitions: <code>SCREAMING_CASE</code></li> <li>east const instead of west const</li> </ul>"},{"location":"internals/CODING_STYLE/#example","title":"Example","text":"<pre><code>namespace org::coding_style::naming_conventions\n{\n    void eastConst() {\n        int const a = 42;        // a is const\n        int const* p = &amp;a;       // value in p is const, p is not const.\n        int const *const p = &amp;a; // both value and p are const.\n    }\n\n    enum class Role { Employed, Unemployed };\n\n    struct User\n    {\n        std::string firstname;\n        std::string lastname;\n        Role role;\n    };\n\n    class Actor\n    {\n      public:\n        Actor(std::string _firstname, std::string _lastname, Role _role) :\n            user_{ std::move(_firstname), std::move(_lastname), _role },\n            credits_{ 0 }\n        {}\n\n        void giveOrTakeCredits(int _amount) noexcept\n        {\n            constexpr auto Scalar = 2;\n            credits += Scalar * _amount;\n        }\n\n        std::string name() const\n        {\n            auto const result = user.firstname + \" \" + user.lastname;\n            return result;\n        }\n\n      private:\n        User user_;\n        int credits_;\n    };\n}\n</code></pre>"},{"location":"internals/text-stack/","title":"A terminal emulator's text stack.","text":""},{"location":"internals/text-stack/#a-terminal-emulators-text-stack","title":"A terminal emulator's text stack.","text":""},{"location":"internals/text-stack/#tldr","title":"TL;DR","text":"<p>This document describes how rendering text is architecturally implemented in Contour, an in-early-development virtual terminal emulator, in order to support complex unicode as well as (and especially) complex colored emoji.</p>"},{"location":"internals/text-stack/#introduction","title":"Introduction","text":"<p>Text rendering in a virtual terminal emulator can be as simple as just iterating over each grid cell's character, mapping it to a Font's bitmap glyph, and rendering it to the target surface at the appropriate position. But it can also be as complex as a web browser's text stack[1] if one may want to do it right.</p> <p>In contrast to web browsers (or word processors), terminal emulators are still rendering text the way they did render text 50 years ago - plus some non-standard extensions that did arise over the decades with regards to formatting.</p> <p>Also, terminal screens weren't made with Unicode in mind, Unicode did not even exist back then, so there were a few workarounds and non-standardized ideas implemented in order to display complex unicode text and symbols in terminals without a common formal ground that terminal application developers can rely on.</p> <p>Text rendering in a terminal emulator puts some additional constraints on how to render, mostly because character placement is decided before text shaping and must align to a fixed-size grid, which makes it almost impossible to properly render traditional japanese text into the terminal, or hewbrew right-to-left text (though, there is a handful of virtual terminal emulators that specialize on the latter and an informal agreement on how to deal with wide characters on the terminal screen).</p> <p>Not every character, or to be displayed symbol (such as emoji) is as wide as exactly one grid cell's width, so additional measurements have to be taken into account for dealing with these characters as well.</p>"},{"location":"internals/text-stack/#unicode-a-very-quick-rundown-in-the-context-of-terminals","title":"Unicode - a very quick rundown in the context of terminals","text":"<p>Unicode is aiming to have one huge universal space where every imaginable \"user perceived character\" can be represented. A \"user perceived character\" is what the user that looks at that character thinks of as one unit. This is in direct contrast to what a character is in computer science. A \"user perceived character\" can be as simple as one single codepoint (32-bit value representing that character) and as complex as an ordered sequence of 7 unbreakable codepoints to compose one single \"user perceived character\".</p> <p>This places additional requirements to a virtual terminal emulator where each grid cell SHOULD contain exactly one \"user perceived character\" (also known as grapheme cluster), that is, an unbreakable codepoint sequence of one or more codepoints that must not be broken up into multiple grid cells before the actual text shaping or screen rendering has been performed.</p> <p>Also, some grapheme clusters take up more than one grid cell in terms of display width, such as Emoji usually take two grid cells in width in order to merely match the Unicode (TR 51, section 2.2) specification's wording that the best practice to display emoji is to render them in a square block.</p>"},{"location":"internals/text-stack/#rendering-text-a-top-level-view","title":"Rendering text - a top level view","text":"<p>A terminal emulator's screen is divided into fixed width and (not necessarily equal) fixed height grid cells. When rendering this grid, it is sufficient to iterate over each line and column and render each grid cell individually, at least when doing basic rendering.</p> <p>Now, when non-trivial user perceived characters need to be supported, the rendering cannot just render each character individually, but must be first grouped into smaller chunks of text with common shared properties, across the grid cell boundaries.</p> <p>Here we enter the world text shaping.</p>"},{"location":"internals/text-stack/#text-shaping","title":"Text Shaping","text":"<p>Simply put, text shaping is the process of translating a sequence of codepoints into glyphs and their glyph positions. This differs from normal text processors and web browsers in a way because glyph placement in virtual terminal emulators are constrained.</p> <p>When shaping text of a single grid line, the line is split into words, delimited by spaces, gaps and SGR attributes, that is, each word must represent the same SGR attributes for every \"user perceived character\" (for example text style or background color must be equal for each position in this sequence, from now on called \"word\").</p> <p>The word can be used as a cacheable unit, in order to significantly speed up rendering for future renders. The cache key is composed of the codepoint sequence of that word, as well as, the common shared SGR attributes.</p> <p>This cacheable word is further segmented into sub runs by a series categories, that is, by Unicode script attribute (such as Latin or Hangul) and the symbol presentation (such as text presentation or Emoji presentation). This is important because one cannot just pass a string of text to the underlying text shaping engine with mixed properties, such as Hewbrew text along with some latin and Kanji or Emoji in between or a font style change for obvious reasons. Each segment (usually called run) must be shaped individually with its own set of fallback fonts. Emoji are using a different font and font fallback list than regular text which uses a different font and font fallback list then bold, italic, or bold itaic fonts. Emoji also have two different presentation styles, the one that everybody expects and is named Emoji emoji presentation (double-width colored emoji) and the other one is named emoji text presentation, which renders emoji in (usually narrow-width) monochrome pictogram.</p> <p>The result of each sub run of a word is composing the sequence of glyph and glyph positions that can be used as the cache value of a cacheable word. The result of all sub runs can be used as the cache value for a cacheable word to be passed to the next stage, the text renderer.</p>"},{"location":"internals/text-stack/#text-rendering","title":"Text Rendering","text":"<p>The text renderer receives an already pre-shaped string of glyphs and glyph positions relative to screen coordinates of the first glyph to be rendered onto the screen.</p> <p>In order to lower the pressure on the GPU and reduce synchronization times between CPU and GPU, all glyph bitmaps are stored into a texture atlas on the GPU, such that the text rendering (when everything has been already uploaded once) just needs to deal with indices to those glyph bitmaps into the appropriate texture atlas as well as screen coordinates where to render those glyphs on the target surface.</p> <p>There is one texture atlas for monochrome glyphs (this is usually standard text) as well as one texture atlas for colored glyphs (usually colored emoji). Additionally there can be a third type of texture atlas for storing LCD anti-aliased bitmap glyphs.</p> <p>Now, when rendering a string of glyphs and glyph positions, each glyph's texture atlas ID and atlas texture coordinate is appended into an atlas coordinate array along with each glyph's absolute screen coordinate and color into a vertex buffer to be uploaded to the GPU.</p> <p>When iterating over the whole screen buffer has finished, the atlas texture and vertex buffer are filled with all glyphs and related information that are reuiqred for rendering one frame. These buffers are then uploaded to the GPU to be drawn in a single GPU render command (such as <code>glDrawArrays</code>, or <code>glDrawElements</code>).</p>"},{"location":"internals/text-stack/#other-terminal-emulator-related-challenges","title":"Other Terminal Emulator related Challenges","text":"<p>Most terminal applications use wcwidth() to detect the width of a potential \"wide character\". A terminal emulator has to deal with such broken client applications. Some however use utf8proc's <code>utf8proc_charwidth</code>, another library to deal with unicode.</p> <p>The suggested way for future applications (emulator and client) would be to introduce feature detection and mode switching on how to process grapheme clusters and their width, if legacy apps are of concern.</p> <p>Algorithmic wise, implementing grapheme cluster segmentation isn't too hard but in execution very expensive. Also grapheme cluster width computation is expensive. But luckily, in the context of terminal emulators, both can be optimized for the general case in terminal emulatoors, which is mostly US-ASCII, and yields almost no penalty with optimizations or a ~60% performance penalty when naively implemented.</p> <p>Also, implementing proper text shaping into a fixed-grid terminal wasn't really the easiest when there is no other project or text to look at. I used \"Blink's text stack\" documentation as the basis and mapped this to the terminal world. Since text shaping IS expensive, this cannot be done without caching without hurting user experience.</p> <p>After investigating into the above optimization possibilities however, I do not see why a terminal emulator should not do provide support for complex unicode, as the performance I have achieved so far is above average at least, and therefore should be sufficient for everyday use.</p> <p>Bidirectional text was not addressed in this document nor in the implementation in the Contour terminal yet, as this imposes a new set of challenges that have to be dealt with separately. Hopefully this will be eventually added (or contributed) and this document will then be updated accordingly.</p>"},{"location":"internals/text-stack/#conclusion","title":"Conclusion","text":"<p>If one went through all the pain on how Unicode, text segmentation, and text shaping works, you will be rewarded with a terminal emulator that is capable of rendering complex unicode. At least as much as most of us desire - being able to use (power user/) programming ligatures and composed Emoji.</p> <p>Some terminal emulators do partly support ligatures or rendering trivial single codepoint Emoji or a few of the composed Emoji codepoint sequences. While this is a great start, I'd say we can deliver more.</p>"},{"location":"internals/text-stack/#final-notes","title":"Final notes","text":"<p>I'd like to see the whole virtual terminal emulator world to join forces and agree on how to properly deal with complex text in a somewhat future-proof way.</p> <p>And while we would be in such an ideal world, we could even throw away all the other legacies that are inevitably inherited from the ancient VT standards that are partly even older than I am. What would we be without dreams. ;-)</p>"},{"location":"internals/text-stack/#references","title":"References","text":"<ul> <li>Blink's text stack</li> <li>UTS 11 - character width</li> <li>UTS 24 - script property</li> <li>UTS 29 - text segmentation (grapheme cluster, word boundary)</li> <li>UTS 51 - Emoji</li> </ul>"},{"location":"vt-extensions/","title":"VT extensions","text":""},{"location":"vt-extensions/#vt-extensions","title":"VT extensions","text":"<p>Contour supports some new or adopted non-standard VT extensions, which will be listed in the sub-sections here.</p>"},{"location":"vt-extensions/buffer-capture/","title":"Buffer Capture","text":""},{"location":"vt-extensions/buffer-capture/#buffer-capture","title":"Buffer Capture","text":"<p>The screen's text buffer can be captured via VT sequence suitable for shell integration, such as <code>fzf</code>.</p>"},{"location":"vt-extensions/buffer-capture/#request-syntax","title":"Request Syntax","text":"<pre><code>CSI &gt; Pl ; Pr t\n</code></pre> <p><code>Pl</code> is  <code>1</code> if the lines are to be counted logically and <code>0</code> if the lines are to be counted visually.</p> <p>A logical line is may be a wrapped line that spans more than one visual line, whereas a visual line always maps to exactly one line on the screen.</p> <p>The parameter <code>Pr</code> is the number of lines to be captured.</p>"},{"location":"vt-extensions/buffer-capture/#response-syntax","title":"Response Syntax","text":"<pre><code>PM 314 ; &lt;data&gt; ST\n</code></pre> <p>The response is may span multiple <code>PM</code> sequences. The reply will always end with a PM message with an empty <code>&lt;data&gt;</code> block, denoting the end of the reply.</p> <p>Each <code>&lt;data&gt;</code> chunk will be UTF-8 encoded of the text lines to be captured. Each line will be delimited by a newline escape sequenced (<code>LF</code>).</p>"},{"location":"vt-extensions/clickable-links/","title":"Clickable Links","text":""},{"location":"vt-extensions/clickable-links/#clickable-links","title":"Clickable Links","text":"<p>This is also known as the <code>OSC 8</code> feature, as it is implemented by quite some other terminal emulators and client applications already.</p>"},{"location":"vt-extensions/clickable-links/#syntax","title":"Syntax","text":"<p><code>OSC 8 ;; URL ST TEXT OSC 8 ;; ST</code></p> <p><code>OSC 8 ; id=ID ; URL ST TEXT OSC 8 ;; ST</code></p>"},{"location":"vt-extensions/clickable-links/#client-tooling","title":"Client Tooling","text":"<ul> <li><code>ls</code> on Linux supports parameter <code>--hyperlinks=auto</code>.</li> <li>GCC 10+ supports hyperlinks for diagnostic output, see <code>-fdiagnostics-hyperlink=auto</code></li> </ul>"},{"location":"vt-extensions/color-palette-update-notifications/","title":"Dark and Light Mode detection","text":""},{"location":"vt-extensions/color-palette-update-notifications/#dark-and-light-mode-detection","title":"Dark and Light Mode detection","text":"<p>Most modern operating systems and desktop environments do support Dark and Light themes, this includes at least MacOS, Windows, KDE Plasma, Gnome, and probably others.</p> <p>Some even support switching from dark to light and light to dark mode based on sun rise / sun set.</p> <p>In order to not make the terminal emulator look bad after such switch, we must enable the applications inside the terminal to detect when the terminal has updated the color palette. This may happen either due to the operating system having changed the current theme or simply because the user has explicitly requested to reconfigure the currently used theme (e.g. because the user requested to change the terminal profile, also containing a different color scheme).</p> <p>Ideally we are getting CLI tools like delta to query the theme mode before sending out RGB values to the terminal to make the output look more in line with the rest of the desktop.</p> <p>But also TUIs like vim should be able to reflect dark/light mode changes as soon as the desktop has changed to light/dark mode or the user has changed the terminal profile.</p>"},{"location":"vt-extensions/color-palette-update-notifications/#query-the-current-theme-mode","title":"Query the current theme mode?","text":"<p>Send <code>CSI ? 996 n</code> to the terminal to explicitly request the current color preference (dark mode or light mode) by the operating system.</p> <p>The terminal will reply back in either of the two ways:</p> VT sequence description <code>CSI ? 997 ; 1 n</code> DSR reply to indicate dark mode <code>CSI ? 997 ; 2 n</code> DSR reply to indicate light mode"},{"location":"vt-extensions/color-palette-update-notifications/#request-unsolicited-dsr-on-color-palette-updates","title":"Request unsolicited DSR on color palette updates","text":"<p>Send <code>CSI ? 2031 h</code> to the terminal to enable unsolicited DSR (device status report) messages for color palette updates and <code>CSI ? 2031 l</code> respectively to disable it again.</p> <p>The sent out DSR looks equivalent to the already above mentioned. This notification is not just sent when dark/light mode has been changed by the operating system / desktop, but also if the user explicitly changed color scheme, e.g. by configuration.</p>"},{"location":"vt-extensions/color-palette-update-notifications/#when-to-send-out-the-dsr","title":"When to send out the DSR?","text":"<p>A terminal emulator should only send out the DSR when the palette has been updated due to a change in the terminal emulator's color palette, e.g. because the user has changed the terminal profile directly or indirectly by changing the operating system theme.</p>"},{"location":"vt-extensions/color-palette-update-notifications/#example-source-code","title":"Example source code","text":"<p>Please have a look at our example C++ source code in order to see how to implement this in your own application.</p>"},{"location":"vt-extensions/color-palette-update-notifications/#adoption-state","title":"Adoption State","text":"Support Terminal/Toolkit/App Notes \u2705 Contour since <code>0.4.0</code> \u2705 Ghostty since <code>1.0.0</code> \u2705 Kitty since <code>0.38.1</code> \u2705 Neovim since <code>d460928</code> \u2705 tmux see tracker: tmux#4269 not yet LazyGit see tracker: lazygit#4366 \u2705 Helix since <code>23a647a</code> not yet WezTerm see tracker: wezterm#6454 not yet Zellij see tracker: zellij#3831 not yet VTE see tracker: vte#2740 not yet Vim see tracker: vim#17251 not yet Nushell see tracker: nushell#15227"},{"location":"vt-extensions/color-palette-update-notifications/#tools","title":"Tools","text":"<ul> <li>rod: Terminal Dark/Light Mode Detection Tool</li> </ul>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/","title":"CSIu Extended Keyboard Protocol","text":""},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#csiu-extended-keyboard-protocol","title":"CSIu Extended Keyboard Protocol","text":""},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#tldr","title":"TL;DR","text":"<p>The main problem with the classic way of processing keyboard input is, that it is highly ambiguous when modifiers need to be used.</p> <p>CSIu aims to solve this by enabling disambiguation of keyboard events that would be ambiguous otherwise.</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#new-vt-sequences","title":"New VT Sequences","text":"VT sequence Short description <code>CSI &gt; {flags} u</code> Enter extended keyboard protocol mode <code>CSI = {flags} u</code> Request enhancement to the currently active protocol <code>CSI = {flags} ; {mode} u</code> Request enhancement to the currently active protocol <code>CSI &lt; {count} u</code> Leave the current keyboard protocol mode <code>CSI &lt; u</code> Leave the current keyboard protocol mode"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#how-entering-and-leaving-works","title":"How entering and leaving works","text":"<p>In order to more conveniently enable the application to configure the keyboard without breaking the calling application, when the current program is about to exit, the terminal leverages an internal stack of keyboard protocol flags.</p> <p>When an application starts, it can push a new desired protocol state onto the keyboard protocol stack, and thus get keyboard events respectively to the flags being set.</p> <p>When the application exits, the flags are being previously stored on the top of the stack, are now simply being popped from the flag stack, thus, effectively making the old state active again.</p> <p>This stack must store at most 32 flags. The bottom-most stack has no flags set, and thus, will act like the legacy keyboard protocol. This bottom-most stack item cannot be popped from the stack.</p> <p>When the terminal hard-resets, the keyboard's flag stack is being set back to 1 element (the legacy flags).</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#operating-mode-flags","title":"Operating Mode Flags","text":"<p>This is the number of flags that can be or'd together into a flag bitset either when entering a new keyboard-protocol session, or when enhancing the currently active keyboard protocol session.</p> Binary Decimal short description <code>0b0'0001</code> <code>1</code> Disambiguation <code>0b0'0010</code> <code>2</code> Report all event types (press, repeat, release) <code>0b0'0100</code> <code>4</code> Report alternate keys <code>0b0'1000</code> <code>8</code> Report all keys as control sequence <code>0b1'0000</code> <code>16</code> Report associated text"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#entering-csiu-mode","title":"Entering CSIu mode","text":"<p>Syntax: <code>CSI &gt; {flags} u</code></p> <p>By default, <code>flags</code> is set to <code>1</code>, but <code>flags</code> can be a binary-OR'd set of flags to enable.</p> <p>Passing <code>0</code> will act like <code>1</code>.</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#flag-disambiguation","title":"Flag: Disambiguation","text":"<p>Any non-ambiuous key event, such as regular text without any modifiers pressed, is is sent out in UTF-8 text as is.</p> <p>Non-printable key events (such as <code>F3</code> or <code>ESC</code>), and printable text key events with modifiers being pressed, are sent out in form of a control sequence.</p> <p>Syntax (for some key events): <code>CSI ? {Code} ; {Modifier} ~</code></p> <p>Syntax (for text and most other key events): <code>CSI ? {Code} ; {Modifier} u</code></p> <p><code>{Code}</code> is the numerical form of the unicode codepoint for textual key events, and a special assigned numeric value from the Unicode PUA range otherwise.</p> <p>Key       | Code | Final Char ----------|------------------- <code>&lt;Enter&gt;</code> | <code>27</code> | <code>u</code></p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#flag-report-all-event-types","title":"Flag: Report all event types","text":"<p>With this flag enabled, an additional sub parameter to the modifier is passed to indicate if the key was just pressed, repeated, or released. A repeat-event is usually triggered by the operating system to simulate key press events at a fixed rate without needing to press and release that key many times.</p> Event type Code Key Press <code>1</code> Key Repeat <code>2</code> Key Release <code>3</code>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#report-alternate-keys","title":"Report alternate keys","text":"<p>TODO ...</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#report-all-keys-as-control-sequence","title":"Report all keys as control sequence","text":"<p>With this flag enabled, not just otherwise ambiguous events are sent as control sequence, but every key event is sent as control sequence instead.</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#report-associated-text","title":"Report associated text","text":"<p>TODO ...</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#change-currently-active-protocol","title":"Change currently active protocol","text":"<p>Syntax: <code>CSI = {flags} ; {mode} u</code></p> <p>The top of the keyboard's flags stack can be changed in one of the three ways:</p> Mode value description <code>1</code> set given flags to currently active flags <code>2</code> add given flags to currently active flags <code>3</code> remove given flags from currently active flags <p>This will immediately take affect.</p>"},{"location":"vt-extensions/csi-u-extended-keyboard-protocol/#leaving-csiu-mode","title":"Leaving CSIu mode","text":"<p>Syntax: <code>CSI &lt; {count} u</code></p> <p>When terminating an application session, an application must pop off what was previously pushed onto the keyboard's flags stack.</p> <p><code>count</code> can be greater than <code>1</code> in order to pop multiple flags at once. Passing a bigger number than the number of elements in the flags stack minus the bottom-most legacy entry, will truncate the number <code>count</code> value to number of elements in the flags stack minus <code>1</code>.</p>"},{"location":"vt-extensions/font-settings/","title":"Query or Change Font Settings","text":""},{"location":"vt-extensions/font-settings/#query-or-change-font-settings","title":"Query or Change Font Settings","text":"<p>This VT extension can be used to query the current font settings of the connected terminal or to change them.</p> <p>Mind, there is a similar VT extension (OSC 50) introduced by xterm, which is inferior.</p>"},{"location":"vt-extensions/font-settings/#syntax-query-font","title":"Syntax: Query Font","text":"<pre><code>OSC 60 ST\n</code></pre>"},{"location":"vt-extensions/font-settings/#syntax-query-font_1","title":"Syntax: Query Font","text":"<pre><code>OSC 60 ; size ; regular ; bold ; italic ; bold italic ST\n</code></pre>"},{"location":"vt-extensions/line-reflow-mode/","title":"Line Reflow Reconfiguration","text":""},{"location":"vt-extensions/line-reflow-mode/#line-reflow-reconfiguration","title":"Line Reflow Reconfiguration","text":"<p>On resize, overly long lines, that would otherwise be cut off, are usually reflowed to the next line on modern terminals.</p> <p>This extension allows toggling reflow for the current line and subsequent lines using a DEC mode (<code>2028</code>).</p>"},{"location":"vt-extensions/line-reflow-mode/#feature-detection","title":"Feature detection","text":"<p>Use <code>DECRQM</code> (<code>CSI ? 2028 $ p</code>) to detect support for line reflow reconfiguration.</p>"},{"location":"vt-extensions/line-reflow-mode/#using-the-feature","title":"Using the feature","text":"<p>Use <code>CSI ? 2028 h</code> to enable text reflow on the current line and the following lines.</p> <p>Use <code>CSI ? 2028 l</code> to disable text reflow on the current line and the following lines.</p>"},{"location":"vt-extensions/save-and-restore-sgr-attributes/","title":"Save and Restore SGR attributes.","text":""},{"location":"vt-extensions/save-and-restore-sgr-attributes/#save-and-restore-sgr-attributes","title":"Save and Restore SGR attributes.","text":""},{"location":"vt-extensions/save-and-restore-sgr-attributes/#feature-detection","title":"Feature detection","text":"<p>Use <code>SGRSAVE</code> (<code>CSI # {</code>) save the currently set SGR attributes, and <code>SGRRESTORE</code> (<code>CSI # }</code>) to restore the previously saved SGR attributes.</p>"},{"location":"vt-extensions/save-and-restore-sgr-attributes/#relation-to-xterms-xtpushsgr-xtpopsgr","title":"Relation to xterm's XTPUSHSGR / XTPOPSGR","text":"<p>Both, <code>XTPUSHSGR</code> and <code>XTPOPSGR</code> are in its most basic form equivalent to <code>SGRSAVE</code> and <code>SGRRESTORE</code>, but the xterm extensions push and pop using a stack rather than save and restore using a simple storage location, and the xterm equivalent does allow pushing/popping only certain SGR attributes.</p> <p>This is needless functionality that should not be implemented by a terminal but rather in the applications itself.</p>"},{"location":"vt-extensions/synchronized-output/","title":"Synchronized Output","text":""},{"location":"vt-extensions/synchronized-output/#synchronized-output","title":"Synchronized Output","text":"<p>Synchronized output is merely implementing the feature as inspired by iTerm2 synchronized output, except that it's not using the rare DCS but rather the well known <code>SM ?</code> and <code>RM ?</code>. iTerm2 has now also adopted to use the new syntax instead of using DCS.</p>"},{"location":"vt-extensions/synchronized-output/#semantics","title":"Semantics","text":"<p>When rendering the screen of the terminal, the Emulator usually iterates through each visible grid cell and renders its current state. With applications updating the screen at a high frequency, this can cause tearing.</p> <p>This mode attempts to mitigate that.</p> <p>When the synchronization mode is enabled following render calls will keep rendering the last rendered state. The terminal Emulator keeps processing incoming text and sequences. When the synchronized update mode is disabled, the renderer may fetch the latest screen buffer state, effectively avoiding the tearing effect by unintentionally rendering in the middle of an application screen update.</p>"},{"location":"vt-extensions/synchronized-output/#feature-detection","title":"Feature detection","text":"<p>Use <code>CSI ? 2026 $ p</code> to query the state of the (DEC) mode <code>2026</code>. This works for any private mode number. If you get nothing back (DECRQM not implemented at all) or you get back a <code>CSI ? 2026 ; 0 $ y</code> then synchronized output is not supported. See DECRQM (request) and DECRPM (response) for more details.</p> <p>DECRPM can respond with different values.</p> Value Documentation Relevance for synchronized output mode ?2026 <code>0</code> Mode is not recognized not supported <code>1</code> Set supported and screen updates are not shown to the user until mode is disabled <code>2</code> Reset supported and screen updates are shown as usual (e.g. as soon as they arrive) <code>3</code> Permanently set undefined <code>4</code> Permanently reset not supported"},{"location":"vt-extensions/synchronized-output/#using-the-feature","title":"Using the feature","text":"<p>Use <code>CSI ? 2026 h</code> to enable batching output commands into a command queue.</p> <p>Use <code>CSI ? 2026 l</code> when done with your current frame rendering, implicitly updating the render state by reading out the latest grid buffer state.</p>"},{"location":"vt-extensions/synchronized-output/#notation","title":"Notation","text":"<p>Some developers name the beginning and end of such a synchronized frame (and therefore the instance)</p> <ul> <li><code>BSU</code> (begin synchronized update, <code>CSI ? 2026 h</code>), and</li> <li><code>ESU</code> (end synchronized update, <code>CSI ? 2026 l</code>).</li> </ul>"},{"location":"vt-extensions/synchronized-output/#timeout","title":"Timeout","text":"<p>So far there is no real consensus on weather a timeout should be and, if so, for how long. The toolkit/application implementer should keep this in mind. However, a too short timeout (maybe due to a very slow connection) won't be worse than having no synchronized output at all.</p>"},{"location":"vt-extensions/synchronized-output/#adoption-state","title":"Adoption State","text":"Support Terminal/Toolkit/App Notes n/a xterm.js see tracker xterm.js#3375 not yet Windows Terminal Proof-of-concept implementation by @j4james exists; tracker: wt#8331 \u2705 Contour \u2705 mintty \u2705 Jexer \u2705 notcurses see tracker: notcurses#1582 \u2705 foot terminal emulator https://codeberg.org/dnkl/foot \u2705 Wezterm see tracker: wezterm#882 not yet VTE / gnome-terminal see tracker: gitlab/vte#15 \u2705 iTerm2 \u2705 Kitty since 5768c54c5b5763e4bbb300726b8ff71b40c128f8 planned Warp see tracker: https://github.com/warpdotdev/Warp/issues/2185 unknown Alacritty unknown Konsole unknown urxvt unknown st <p>In case some project is adding support for this feature, please leave a comment or contact me, so we can keep the spec and implementation state table up to date.</p>"},{"location":"vt-extensions/synchronized-output/#reference","title":"Reference","text":"<p>The original document of this page was stored here.</p>"},{"location":"vt-extensions/unicode-core/","title":"Unicode Core","text":""},{"location":"vt-extensions/unicode-core/#unicode-core","title":"Unicode Core","text":"<p>We implement the Terminal Unicode Core specification, which addresses some of the problems terminals usually have when it comes to Unicode.</p> <p>This mainly addresses complex grapheme cluster handling, variation selectors (VS15, VS16) handling, and its cursor placement.</p> <p>Right-to-left (RTL) text is explicitly not handled in this extension.</p> <p>Please follow up on the specification here: https://github.com/contour-terminal/terminal-unicode-core</p>"},{"location":"vt-extensions/vertical-line-marks/","title":"Vertical Line Markers","text":""},{"location":"vt-extensions/vertical-line-marks/#vertical-line-markers","title":"Vertical Line Markers","text":"<p>Suppose you type a lot in the terminal, and I bet you do. Some commands may have inconveniently long output and you need a way to conveniently scroll the terminal viewport up to the top of that command. This is what this feature is there for. You can easily walk up/down your markers like you'd walk up code folds or markers in VIM or other editors.</p>"},{"location":"vt-extensions/vertical-line-marks/#set-a-mark","title":"Set a mark:","text":"<pre><code>echo -ne \"\\033[&gt;M\"\n</code></pre>"},{"location":"vt-extensions/vertical-line-marks/#example-key-bindings-in-contour","title":"Example key bindings in Contour:","text":"<pre><code>input_mapping:\n    - { mods: [Alt, Shift], key: 'k', mode: '~Alt', action: ScrollMarkUp }\n    - { mods: [Alt, Shift], key: 'j', mode: '~Alt', action: ScrollMarkDown }\n</code></pre> <p>It is recommended to integrate the marker into your command prompt, such as <code>$PS1</code> in bash or sh to have automatic markers set.</p>"},{"location":"vt-extensions/vertical-line-marks/#integration-into-zsh","title":"Integration into ZSH:","text":"<p>zsh is way too configurable to give a fully generic answer here, but to show how you can integrate vertical line markers when using powerlevel9k, this is what your <code>~/.zshrc</code> config could contain:</p> <pre><code>prompt_setmark() {\n    echo -ne \"%{\\033[&gt;M%}\"\n}\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(setmark user dir vcs)\n</code></pre>"},{"location":"vt-extensions/vertical-line-marks/#integration-into-bash","title":"Integration into Bash","text":"<p>Bash is usually highly customized to your needs, but the bottom line would be as suggested below. You can create your custom <code>prompt_setmark</code> function that contains <code>\\\\[</code> and <code>\\\\]</code> as enclosing markers for the escape sequence to tell your shell that they do not change the current cursor position, and then use this function in our <code>PS1</code> environment variable or invoked inside your function assigned to <code>PROMPT_COMMAND</code>.</p> <pre><code>prompt_setmark() {\n    echo -ne \"\\\\[\\033[&gt;M\\\\]\"\n}\n\n# extending existing PS1\nexport PS1=\"`prompt_setmark`${PS1}\"\n</code></pre>"},{"location":"vt-sequence/","title":"VT sequences","text":""},{"location":"vt-sequence/#vt-sequences","title":"VT sequences","text":"<p>List of VT sequences supported by Contour Terminal Emulator.</p>"},{"location":"vt-sequence/#control-codes","title":"Control Codes","text":"Sequence Code Description <code>\\x04</code> EOT End of Transmission <code>\\x07</code> BEL Bell <code>\\x08</code> BS Backspace <code>\\t</code> TAB Tab <code>\\n</code> LF Line Feed <code>\\x0b</code> VT Vertical Tab <code>\\x0c</code> FF Form Feed <code>\\r</code> CR Carriage Return <code>\\x0e</code> LS1 Shift Out; Maps G1 into GL. <code>\\x0f</code> LS0 Shift In; Maps G0 into GL (the default)."},{"location":"vt-sequence/#escape-sequences","title":"Escape Sequences","text":"Sequence Code Description <code>ESC ( 0</code> SCS_G0_SPECIAL Set G0 to DEC Special Character and Line Drawing Set <code>ESC ) 0</code> SCS_G1_SPECIAL Set G1 to DEC Special Character and Line Drawing Set <code>ESC   6</code> DECBI Back Index <code>ESC   7</code> DECSC Save Cursor <code>ESC   8</code> DECRS Restore Cursor <code>ESC # 8</code> DECALN Screen Alignment Pattern <code>ESC   9</code> DECFI Forward Index <code>ESC   =</code> DECKPAM Keypad Application Mode <code>ESC   &gt;</code> DECKPNM Keypad Numeric Mode <code>ESC ( B</code> SCS_G0_USASCII Set G0 to USASCII <code>ESC ) B</code> SCS_G1_USASCII Set G1 to USASCII <code>ESC   D</code> IND Index <code>ESC   E</code> NEL Next Line <code>ESC   H</code> HTS Horizontal Tab Set <code>ESC   M</code> RI Reverse Index <code>ESC   N</code> SS2 Single Shift Select (G2 Character Set) <code>ESC   O</code> SS3 Single Shift Select (G3 Character Set) <code>ESC   c</code> RIS Reset to Initial State (Hard Reset)"},{"location":"vt-sequence/#control-sequences","title":"Control Sequences","text":"Sequence Code Description <code>CSI   0      6</code> DECXCPR Report cursor position <code>CSI   0..1   @</code> ICH Insert characters <code>CSI   0..1   A</code> CUU Move cursor up <code>CSI   0..1   B</code> CUD Move cursor down <code>CSI   0..1   C</code> CUF Move cursor forward <code>CSI   0..1   D</code> CUB Move cursor backward <code>CSI   0..1   E</code> CNL Move cursor to next line <code>CSI   0..1   F</code> CPL Move cursor to previous line <code>CSI   0..1   G</code> CHA Move cursor to column <code>CSI   0..2   H</code> CUP Move cursor to position <code>CSI   0..1   I</code> CHT Cursor Horizontal Forward Tabulation <code>CSI   0..    J</code> ED Erase in Display <code>CSI ? 0..1   J</code> DECSED Selective Erase in Display <code>CSI   0..1   K</code> EL Erase in Line <code>CSI ? 0..1   K</code> DECSEL Selective Erase in Line <code>CSI   0..1   L</code> IL Insert lines <code>CSI   0..1   M</code> DL Delete lines <code>CSI &gt; 0      M</code> SETMARK Set Mark <code>CSI   0..1   P</code> DCH Delete characters <code>CSI   0..  # P</code> XTPUSHCOLORS Pushes the color palette onto the palette's saved-stack. <code>CSI   0..  # Q</code> XTPOPCOLORS Pops the color palette from the palette's saved-stack. <code>CSI   0    # R</code> XTREPORTCOLORS Reports number of color palettes on the stack. <code>CSI   0..1   S</code> SU Scroll Up <code>CSI ? 2..4   S</code> XTSMGRAPHICS Set/request graphics attribute <code>CSI   0..1   T</code> SD Scroll Down <code>CSI   0..1   X</code> ECH Erase characters <code>CSI   0..1   Z</code> CBT Cursor Backward Tabulation <code>CSI   1      ```</code> HPA Horizontal Position Absolute <code>CSI   1      a</code> HPR Horizontal Position Relative <code>CSI   1      b</code> REP Repeat last character <code>CSI   0..1   c</code> DA1 Primary Device Attributes <code>CSI = 0..1   c</code> DA3 Tertiary Device Attributes <code>CSI &gt; 0..1   c</code> DA2 Secondary Device Attributes <code>CSI   0..1   d</code> VPA Vertical Position Absolute <code>CSI   0..2   f</code> HVP Horizontal and Vertical Position <code>CSI   0..1   g</code> TBC Horizontal Tab Clear <code>CSI   1..    h</code> SM Set Mode <code>CSI ? 1..    h</code> DECSM Set DEC-mode <code>CSI   1..    l</code> RM Reset Mode <code>CSI ? 1..    l</code> DECRM Reset DEC-mode <code>CSI   0..    m</code> SGR Select Graphic Rendition <code>CSI   1      n</code> DSR Device Status Report (DEC) <code>CSI ? 1      n</code> DSR Device Status Report (DEC) <code>CSI   0..1   p</code> DECSSCLS Set Scroll Speed. <code>CSI   0    ! p</code> DECSTR Soft terminal reset <code>CSI   2    \" p</code> DECSCL Set conformance level (DECSCL), VT220 and up. <code>CSI   1    $ p</code> DECRQM_ANSI Request ANSI-mode <code>CSI ? 1    $ p</code> DECRQM Request DEC-mode <code>CSI   0..1   q</code> DECSCUSR Set Cursor Style <code>CSI   0..1 \" q</code> DECSCA Select Character Protection Attribute <code>CSI &gt; 0..1   q</code> XTVERSION Report xterm version <code>CSI   0..2   r</code> DECSTBM Set top/bottom margin <code>CSI   5..  $ r</code> DECCARA Change Attributes in Rectangular Area <code>CSI ? 0..    r</code> XTRESTORE Restore DEC private modes. <code>CSI   0      s</code> SCOSC Save Cursor (available only when DECLRMM is disabled) <code>CSI   0..2   s</code> DECSLRM Set left/right margin <code>CSI &gt; 0..1   s</code> XTSHIFTESCAPE Set/reset shift-escape options <code>CSI ? 0..    s</code> XTSAVE Save DEC private modes. <code>CSI   1..3   t</code> WINMANIP Window Manipulation <code>CSI &gt; 0..2   t</code> XTCAPTURE Report screen buffer capture. <code>CSI   0      u</code> ANSISYSSC Save Cursor (ANSI.SYS) <code>CSI &lt; 0..1   u</code> CSIULEAVE Leave Extended keyboard mode <code>CSI = 1..2   u</code> CSIUENHCE Request enhancement to extended keyboard mode <code>CSI &gt; 0..1   u</code> CSIUENTER Enter Extended keyboard mode <code>CSI ? 0      u</code> CSIUQUERY Query Extended keyboard mode <code>CSI   0..8 $ v</code> DECCRA Copy rectangular area <code>CSI   1    $ w</code> DECRQPSR Request presentation state report <code>CSI   0..5 $ x</code> DECFRA Fill rectangular area <code>CSI   0..4 $ z</code> DECERA Erase rectangular area <code>CSI   0    # {</code> SGRSAVE Saves video attributes onto stack. <code>CSI   0..4 $ {</code> DECSERA Selective Erase in Rectangular Area <code>CSI   0..1 $ |</code> DECSCPP Select 80 or 132 Columns per Page <code>CSI   0..1 * |</code> DECSNLS Select number of lines per screen. <code>CSI   0    # }</code> SGRRESTORE Restores video attributes. <code>CSI   0..1 $ }</code> DECSASD Select Active Status Display <code>CSI   0..1 ' }</code> DECIC Insert column <code>CSI   0..1 $ ~</code> DECSSDT Select Status Display (Line) Type <code>CSI   0..1 ' ~</code> DECDC Delete column <code>CSI   3..18 , ~</code> DECPS Controls the sound frequency or notes"},{"location":"vt-sequence/#operating-system-commands","title":"Operating System Commands","text":"Sequence Code Description <code>OSC 0</code> SETTITLE Change Window &amp; Icon Title <code>OSC 1</code> SETICON Change Icon Title <code>OSC 2</code> SETWINTITLE Change Window Title <code>OSC 3</code> SETXPROP Set X11 property <code>OSC 4</code> SETCOLPAL Set/Query color palette <code>OSC 7</code> SETCWD Set current working directory <code>OSC 8</code> HYPERLINK Hyperlinked Text <code>OSC 10</code> COLORFG Change or request text foreground color. <code>OSC 11</code> COLORBG Change or request text background color. <code>OSC 12</code> COLORCURSOR Change text cursor color to Pt. <code>OSC 13</code> COLORMOUSEFG Change mouse foreground color. <code>OSC 14</code> COLORMOUSEBG Change mouse background color. <code>OSC 50</code> SETFONT Get or set font. <code>OSC 52</code> CLIPBOARD Clipboard management. <code>OSC 60</code> SETFONTALL Get or set all font faces, styles, size. <code>OSC 104</code> RCOLPAL Reset color full palette or entry <code>OSC 106</code> COLORSPECIAL Enable/disable Special Color Number c. <code>OSC 110</code> RCOLORFG Reset VT100 text foreground color. <code>OSC 111</code> RCOLORBG Reset VT100 text background color. <code>OSC 112</code> RCOLORCURSOR Reset text cursor color. <code>OSC 113</code> RCOLORMOUSEFG Reset mouse foreground color. <code>OSC 114</code> RCOLORMOUSEBG Reset mouse background color. <code>OSC 117</code> RCOLORHIGHLIGHTBG Reset highlight background color. <code>OSC 119</code> RCOLORHIGHLIGHTFG Reset highlight foreground color. <code>OSC 777</code> NOTIFY Send Notification. <code>OSC 888</code> DUMPSTATE Dumps internal state to debug stream."},{"location":"vt-sequence/#device-control-sequences","title":"Device Control Sequences","text":"Sequence Code Description <code>DCS   0    $ p</code> STP Set Terminal Profile <code>DCS   0..3   q</code> DECSIXEL Sixel Graphics Image <code>DCS   0    $ q</code> DECRQSS Request Status String <code>DCS   0    + q</code> XTGETTCAP Request Termcap/Terminfo String"}]}